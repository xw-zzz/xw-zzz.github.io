import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as i,b as l}from"./app-ef0b4d9d.js";const a="/assets/image-20230131221343878-94817c06.png",t={},n=l('<h1 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h1><p>Spring MVC中的MVC即模型-视图-控制器，该框架围绕一个DispatcherServlet设计，DispatcherServlet会把请求分发给各个处理器，并支持可配置的处理器映射和视图渲染等功能，过程如下图所示：</p><p><img src="'+a+'" alt="image-20230131221343878" loading="lazy"></p><ol><li>客户端发起HTTP请求：客户端将请求提交到DispatcherServlet。</li><li>寻找处理器：由DispatcherServlet控制器查询一个或多个HandlerMapping，找到处理该请求的Controller。</li><li>调用处理器：DispatcherServlet将请求提交到Controller。</li><li>调用业务处理逻辑并返回结果：Controller调用业务处理逻辑后，返回ModelAndView。</li><li>处理视图映射并返回模型：DispatcherServlet查询一个或多个ViewResoler视图解析器，找到ModelAndView指定的视图。</li><li>HTTP响应：视图负责将结果在客户端浏览器上渲染和展示。</li></ol><h1 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h1><h2 id="组件介绍" tabindex="-1"><a class="header-anchor" href="#组件介绍" aria-hidden="true">#</a> 组件介绍</h2><ul><li>DispatcherServlet: DispatcherServlet 会通过一组已注册的处理器映射找到一个处理器（Handler），然后从一组已注册的处理器适配器中找到一个支持该处理器的处理器适配器，通过它把控制流转发给这个处理器。这个处理器在结束业务逻辑的调用后，会把模型数据和逻辑视图回传给DispatcherServlet。最后，DispatcherServlet会通过视图解析器（ViewResolver）得到真正的视图，把控制权交给视图，同时传入模型数据。视图会按照一定的视图层定义，将这些数据展现到用户的响应里。</li><li>处理器映射（HandlerMapping）：用于将一个请求（Request）映射到一个处理器</li><li>处理器适配器（HandlerAdaptor）：用于转接一个控制流到一个指定类型的处理器。</li><li>视图解析器：用于映射一个逻辑视图名称到一个真正的视图。</li></ul>',7),s=[n];function c(o,h){return r(),i("div",null,s)}const _=e(t,[["render",c],["__file","08.Spring mvc执行流程.html.vue"]]);export{_ as default};
