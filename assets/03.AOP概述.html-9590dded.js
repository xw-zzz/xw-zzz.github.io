import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as a,c as s,a as e,e as o,d as r}from"./app-ef0b4d9d.js";const c="/assets/image-20231011154931940-0a8acc12.png",l={},d=e("h1",{id:"什么是aop",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是aop","aria-hidden":"true"},"#"),o(" 什么是AOP？")],-1),_=e("strong",null,"面向切面程序设计",-1),h=e("strong",null,"面向方面程序设计",-1),A=e("strong",null,"剖面导向程序设计",-1),p={href:"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6",target:"_blank",rel:"noopener noreferrer"},E={href:"https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"},u={href:"https://zh.wikipedia.org/wiki/%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9",target:"_blank",rel:"noopener noreferrer"},g={href:"https://zh.wikipedia.org/wiki/%E4%B8%BB%E5%85%B3%E6%B3%A8%E7%82%B9",target:"_blank",rel:"noopener noreferrer"},f={href:"https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"set*",-1),B=e("p",null,"使用AOP后，不仅可以将这些重复的代码抽取出来单独维护，如统一日志输出、数据校验等，还可以为如何使用这些公共代码提供丰富灵活的手段。",-1),v=e("p",null,[e("img",{src:c,alt:"image-20231011154931940",loading:"lazy"})],-1),P=e("h1",{id:"aop概念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#aop概念","aria-hidden":"true"},"#"),o(" AOP概念")],-1),m=e("ul",null,[e("li",null,"Advice（通知）定义在连接点做什么，为切面增强提供织入接口。在Spring AOP中主要描述Spring AOP围绕方法调用而注入的切面行为。Advice是AOP联盟定义的一个接口，具体的接口定义在org.aopalliance.aop.Advice中。在Spring AOP的实现中，使用了这个统-一接口，并通过这个接口，为AOP切面增强的织入功能做了更多的细化和扩展，比如提供了更具体的通知类型，如BeforeAdvice、AfterAdvice、ThrowsAdvice等。"),e("li",null,"Pointcut（切点）决定Advice通知应该作用于哪个连接点，也就是说通过Pointcut来定义需要增强的方法的集合，这些集合的选取可以按照一定的规则来完成。在这种情况下，Pointcut通常意味着标识方法，例如，这些需要增强的地方可以由某个正则表达式进行标识，或根据某个方法名进行匹配等。"),e("li",null,"Advisor（通知器）完成对目标方法的切面增强设计（Advice)和关注点的设计(Pointcut)以后，需要一个对象把它们结合起来，完成这个作用的就是Advisor(通知器)。通过Advisor,可以定义应该使用哪个通知并在哪个关注点使用它，也就是说通过Advisor,把Advice和Pointcut结合起来")],-1);function w(O,x){const t=i("ExternalLinkIcon");return a(),s("div",null,[d,e("p",null,[_,o("（Aspect-oriented programming，AOP，又译作"),h,o("、"),A,o("），是"),e("a",p,[o("计算机科学"),r(t)]),o("中的一种"),e("a",E,[o("程序设计思想"),r(t)]),o("，旨在将"),e("a",u,[o("交叉切入关注点"),r(t)]),o("与作为业务主体的"),e("a",g,[o("核心关注点"),r(t)]),o("进行分离，以提高程序代码的"),e("a",f,[o("模块化"),r(t)]),o("程度。通过在现有代码基础上增加额外的通告（Advice）机制，能够对被声明为“点切入”（Pointcut）的代码块进行统一管理与装饰，比如说：“对所有方法名以"),k,o("开头的方法添加后台日志”。该思想使得开发人员能够将与代码核心业务逻辑关系不那么密切的功能（如日志功能）添加至程序中，同时又不降低业务代码的可读性。------摘自维基百科")]),B,v,P,m])}const C=n(l,[["render",w],["__file","03.AOP概述.html.vue"]]);export{C as default};
