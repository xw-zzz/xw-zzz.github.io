import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-ef0b4d9d.js";const p="/assets/20220806234639-29fa6ea4.png",e="/assets/20220806235953-1ba5ed95.png",c="/assets/20220807000006-10b462a6.png",l={},o=t('<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>Flink里面时间分类</p><ul><li>事件时间EventTime <ul><li>事件发生的时间</li><li>事件时间是每个单独事件在其产生进程上发生的时间，这个时间通常在记录进入 Flink 之前记录在对象中</li><li>在事件时间中，时间值 取决于数据产生记录的时间，而不是任何Flink机器上的</li></ul></li><li>进入时间 IngestionTime <ul><li>事件到进入Flink</li></ul></li><li>处理时间ProcessingTime <ul><li>事件被flink处理的时间</li><li>指正在执行相应操作的机器的系统时间</li><li>是最简单的时间概念，不需要流和机器之间的协调，它提供最佳性能和最低延迟</li><li>但是在分布式和异步环境中，处理时间有不确定性，存在延迟或乱序问题</li></ul></li></ul><p><img src="'+p+`" alt="" loading="lazy"></p><p>设置时间语义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic<span class="token punctuation">.</span>EventTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="乱序时间处理" tabindex="-1"><a class="header-anchor" href="#乱序时间处理" aria-hidden="true">#</a> 乱序时间处理</h2><p>一般我们都是用EventTime事件时间进行处理统计数据，但数据由于网络问题延迟、乱序到达会导致窗口计算数据不准确。比如时间窗是 [12:01:01,12:01:10 ) ，但是有数据延迟到达，当 12:01:10 秒数据到达的时候，不立刻触发窗口计算，而是等一定的时间，等迟到的数据来后再关闭窗口进行计算。</p><ul><li><p>Watermark 水位线介绍</p><ul><li>由flink的某个operator操作生成后，就在整个程序中随event数据流转 <ul><li>With Periodic Watermarks（周期生成，可以定义一个最大允许乱序的时间，用的很多）</li><li>With Punctuated Watermarks（标点水位线，根据数据流中某些特殊标记事件来生成，相对少）</li></ul></li><li>衡量数据是否乱序的时间，什么时候不用等早之前的数据</li><li>是一个全局时间戳，不是某一个key下的值</li><li>是一个特殊字段，单调递增的方式，主要是和数据本身的时间戳做比较</li><li>用来确定什么时候不再等待更早的数据了，可以触发窗口进行计算，忍耐是有限度的，给迟到的数据一些机会</li><li>注意 <ul><li>Watermark 设置太小会影响数据准确性，设置太大会影响数据的实时性，更加会加重Flink作业的负担</li><li>需要经过测试，和业务相关联，得出一个较合适的值即可</li></ul></li></ul></li><li><p>窗口触发计算的时机</p><ul><li>watermark之前是按照窗口的关闭时间点计算的 [12:01:01,12:01:10 )</li><li>watermark之后，触发计算的时机 <ul><li>窗口内有数据</li><li>Watermaker &gt;= Window EndTime窗口结束时间</li></ul></li><li>触发计算后，其他窗口内数据再到达也被丢弃</li><li>Watermaker = 当前计算窗口最大的事件时间 - 允许乱序延迟的时间</li></ul></li><li><p>数据流中的事件是有序</p></li></ul><p><img src="`+e+'" alt="" loading="lazy"></p><ul><li>数据流中的事件是无序</li></ul><p><img src="'+c+`" alt="" loading="lazy"></p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><ul><li>window大小为10s，窗口是W1 [23:12:00~23:12:10) 、 W2[23:12:10~23:12:20) <ul><li>下面是数据的event time</li><li>数据A 23:12:07</li><li>数据B 23:12:11</li><li>数据C 23:12:08</li><li>数据D 23:12:17</li><li>数据E 23:12:09</li></ul></li><li>没加入watermark,由上到下进入flink <ul><li>数据B到了之后，W1就进行了窗口计算，数据只有A</li><li>数据C 迟到了3秒，到了之后，由于W1已经计算了，所以就丢失了数据C</li></ul></li><li>加入watermark, 允许5秒延迟乱序，由上到下进入flink <ul><li>数据A到达 <ul><li>watermark = 12:07 - 5 = 12:02 &lt; 12:10 ,所以不触发W1计算, A属于W1</li></ul></li><li>数据B到达 <ul><li>watermark = max{ 12:11, 12:07} - 5 = 12:06 &lt; 12:10 ,所以不触发W1计算, B属于W2</li></ul></li><li>数据C到达 <ul><li>watermark = max{12:08, 12:11, 12:07} - 5 = 12:06 &lt; 12:10 ,所以不触发W1计算, C属于W1</li></ul></li><li>数据D到达 <ul><li>watermark = max{12:17, 12:08, 12:11, 12:07} - 5 = 12:12 &gt; 23:12:10 , 触发W1计算, D属于W2</li></ul></li><li>数据E到达 <ul><li>watermark = max{12:09, 12:17, 12:08, 12:11, 12:07} - 5 = 12:12 &gt; 23:12:10 , 之前已触发W1计算, 所以丢失了E数据，</li></ul></li></ul></li><li>Watermaker 计算 = 当前计算窗口最大的事件时间 - 允许乱序延迟的时间</li><li>什么时候触发W1窗口计算 <ul><li>Watermaker &gt;= Window EndTime窗口结束时间</li><li>当前计算窗口最大的事件时间 - 允许乱序延迟的时间 &gt;= Window EndTime窗口结束时间</li></ul></li></ul><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><ul><li><strong>Watermark</strong> 一次数据兜底</li><li><strong>allowedLateness</strong> 二次数据兜底</li><li><strong>OutputTag</strong> 最后数据兜底</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token comment">//构建执行任务环境以及任务的启动的入口, 存储全局相关的参数</span>
        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//java,2022-11-11 09-10-10,15</span>
        <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ds <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> flatMapDS <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Tuple3</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//指定watermark</span>
        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> watermarkDS <span class="token operator">=</span> flatMapDS<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token class-name">WatermarkStrategy</span>
                <span class="token comment">//指定允许乱序延迟的最大时间 3 秒</span>
                <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token function">forBoundedOutOfOrderness</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">//指定POJO事件时间列，毫秒</span>
                <span class="token punctuation">.</span><span class="token function">withTimestampAssigner</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">strToDate</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>




        <span class="token comment">//最后的兜底数据</span>
        <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> lateData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;lateDataOrder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">//分组 开窗</span>
        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sumDS <span class="token operator">=</span> watermarkDS<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeySelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">.</span>f0<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">//开窗</span>
                <span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">TumblingEventTimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                <span class="token comment">//允许1分钟延迟</span>
                <span class="token punctuation">.</span><span class="token function">allowedLateness</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sideOutputLateData</span><span class="token punctuation">(</span>lateData<span class="token punctuation">)</span>

                <span class="token comment">//聚合， 方便调试拿到窗口全部数据，全窗口函数</span>
                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span> window<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> input<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

                        <span class="token comment">//准备list，存储窗口的事件时间</span>
                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> timeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> order<span class="token operator">:</span>input<span class="token punctuation">)</span><span class="token punctuation">{</span>
                            timeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            total <span class="token operator">=</span> total<span class="token operator">+</span>order<span class="token punctuation">.</span>f2<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>

                        <span class="token class-name">String</span> outStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;分组key:%s,聚合值:%s,窗口开始结束:[%s~%s),窗口所有事件时间:%s&quot;</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span>total<span class="token punctuation">,</span> <span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">getStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">TimeUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeList<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>outStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        sumDS<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//最后兜底处理</span>
        sumDS<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span>lateData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;late data order&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;watermark job&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><p>第一层 窗口window 的作用是从DataStream数据流里指定范围获取数据。</p></li><li><p>第二层 watermark的作用是防止数据出现乱序延迟，允许窗口等待延迟数据达到，再触发计算</p></li><li><p>第三层 allowLateness 会让窗口关闭时间再延迟一段时间, 如果还有数据达到，会局部修复数据并主动更新窗口的数据输出</p></li><li><p>第四层 sideOutPut侧输出流是最后兜底操作，在窗口已经彻底关闭后，所有过期延迟数据放到侧输出流，可以单独获取，存储到某个地方再批量更新之前的聚合的数据</p></li></ul>`,19),i=[o];function u(k,r){return s(),a("div",null,i)}const v=n(l,[["render",u],["__file","777.Flink时间概念和无序数据处理.html.vue"]]);export{v as default};
