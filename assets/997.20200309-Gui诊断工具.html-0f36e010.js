import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as p}from"./app-ef0b4d9d.js";const t="/assets/20210309223412-dd185242.png",e="/assets/20210309223832-7e92ba90.png",c="/assets/20210309224353-4b6359a9.png",o="/assets/20210309230611-429f2a4b.png",l="/assets/20210309231638-830d96b1.png",i="/assets/20210309233224-1665a5fe.png",u="/assets/20210309232311-ecfed19a.png",k={},r=p(`<h3 id="visual-vm" tabindex="-1"><a class="header-anchor" href="#visual-vm" aria-hidden="true">#</a> Visual VM</h3><p>功能：</p><ul><li>生成/读取堆内存快照</li><li>查看JVM参数和系统属性</li><li>查看运行中的虚拟机进程</li><li>生成/读取线程快照</li><li>程序资源的实时监控</li><li>远程环境监控</li><li>CPU分析和内存分析</li></ul><p>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Picture</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Picture</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pixels<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pixels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加JVM参数-Xms600m -Xmx600m。上面的demo一直在产生新的对象并保持引用，所以最终会导致OOM。</p><p>Visual VM分析：</p><p><img src="`+t+'" alt="" loading="lazy"></p><p>根据堆内存监控分析图可以得到堆逐渐增大却没有触发GC，说明对象一直存活，导致了内存泄漏。</p><p><img src="'+e+'" alt="" loading="lazy"></p><p>从线程分配的数据来看，main线程分配字节数据较多。</p><p><img src="https://cdn.jsdelivr.net/gh/2457081614/blog-image/20210309224207.png" alt="" loading="lazy"></p><p>​ 通过CPU抽样知道CPU热点方法。</p><p><img src="'+c+'" alt="" loading="lazy"></p><p>通过观察dump知道有大byte[]对象存在。</p><h3 id="mat" tabindex="-1"><a class="header-anchor" href="#mat" aria-hidden="true">#</a> mat</h3><p>mat是eclipse开源的一款JVM分析工具，主要特点是支持自动对内存泄漏进行分析和OQL语句查询。</p><p><img src="'+o+'" alt="" loading="lazy">通过分析dump文件可以自动分析内存泄漏，可以帮助我们快速定位到问题。</p><p>直方图：</p><p><img src="'+l+'" alt="" loading="lazy"></p><hr><p>补充概念：</p><p>浅堆(Shallow Heap)是指一个对象所消耗的内存。在32位系统中，一个对象引用会占据4个字节，一个int类型会占据4个字节，long型变量会占据8个字节，每个对象头需要占用8个字节。根据堆快照格式不同，对象的大小可能会向8字节进行对齐。</p><p><img src="'+i+'" alt="" loading="lazy"></p><p>保留集：对象A的保留集指当对象A被垃圾回收后，可以被释放的所有的对象集合(包括对象A本身)，即对象A的保留集可以被认为是只能通过对象A被直接或间接访问到的所有对象的集合。通俗地说，就是指仅被对象A所持有的对象的集合。</p><p>深堆：深堆是指对象的保留集中所有的对象的浅堆大小之和。</p><p>注意:浅堆指对象本身占用的内存，不包括其内部引用对象的大小。一个对象的深堆指只能通过该对象访问到的(直接或间接)所有对象的浅堆之和，即对象被回收后，可以释放的真实空间。</p><hr><p>查看线程：</p><p><img src="'+u+'" alt="" loading="lazy"></p>',30),d=[r];function m(v,b){return s(),a("div",null,d)}const y=n(k,[["render",m],["__file","997.20200309-Gui诊断工具.html.vue"]]);export{y as default};
