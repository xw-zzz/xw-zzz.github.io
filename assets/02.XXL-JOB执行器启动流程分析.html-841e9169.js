import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-ef0b4d9d.js";const p="/assets/image-20221117173553470-713e47aa.png",e="/assets/image-20221117180325512-a11f1853.png",o="/assets/image-20221118164450768-348274e9.png",c="/assets/image-20221118165246047-8e083507.png",l="/assets/image-20221118170910059-0d9aed64.png",i={},u=t(`<h2 id="初始化流程" tabindex="-1"><a class="header-anchor" href="#初始化流程" aria-hidden="true">#</a> 初始化流程</h2><p>声明<code>XxlJobSpringExecutor</code>bean后，执行器会自动开始进行初始化逻辑，声明代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">XxlJobSpringExecutor</span> <span class="token function">xxlJobExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">XxlJobSpringExecutor</span> xxlJobSpringExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxlJobSpringExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAdminAddresses</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAppname</span><span class="token punctuation">(</span>appname<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setAccessToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    xxlJobSpringExecutor<span class="token punctuation">.</span><span class="token function">setLogRetentionDays</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> xxlJobSpringExecutor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>XxlJobSpringExecutor</code> 交给Spring预初始化后会自动执行执行器初始化操作，这是怎么实现的呢？查看<code>XxlJobSpringExecutor</code>相关逻辑，代码如下：</p><p><img src="`+p+`" alt="image-20221117173553470" loading="lazy"></p><p>执行器实现了 <code>ApplicationContextAware, SmartInitializingSingleton, DisposableBean</code>三个接口，作用分别如下：</p><ul><li><code>ApplicationContextAware</code>可以获取到<code>ApplicationContext</code></li><li><code>org.springframework.beans.factory.DisposableBean#destroy</code>，该方法在bean销毁后调用。</li><li><code>org.springframework.beans.factory.SmartInitializingSingleton#afterSingletonsInstantiated</code>方法在单例bean预加载后被调用，<code>XxlJobSpringExecutor</code>实现了该方法，初始化的核心流程就通过该方法实现。</li></ul><p>核心流程如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// init JobHandler Repository</span>
        <span class="token comment">/*initJobHandlerRepository(applicationContext);*/</span>

        <span class="token comment">// init JobHandler Repository (for method)</span>
        <span class="token function">initJobHandlerMethodRepository</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// refresh GlueFactory</span>
        <span class="token class-name">GlueFactory</span><span class="token punctuation">.</span><span class="token function">refreshInstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// super start</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大致分为三个步骤：</p><ul><li>初始化JobHandler</li><li>刷新工厂类</li><li>调用父类的启动方法</li></ul><p>initJobHandlerMethodRepository方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initJobHandlerMethodRepository</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>applicationContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// init job handler from method</span>
    <span class="token comment">//从容器获取bean数组</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanDefinitionNames <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanDefinitionName <span class="token operator">:</span> beanDefinitionNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// get bean</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 忽略懒加载bean</span>
        <span class="token class-name">Lazy</span> onBean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">findAnnotationOnBean</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">,</span> <span class="token class-name">Lazy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>onBean<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;xxl-job annotation scan, skip @Lazy Bean:{}&quot;</span><span class="token punctuation">,</span> beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            bean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// filter method</span>
        <span class="token comment">// 获取@XxlJob注解的方法</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span> annotatedMethods <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">// referred to ：org.springframework.context.event.EventListenerMethodProcessor.processBean</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            annotatedMethods <span class="token operator">=</span> <span class="token class-name">MethodIntrospector</span><span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">MethodIntrospector<span class="token punctuation">.</span>MetadataLookup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">public</span> <span class="token class-name">XxlJob</span> <span class="token function">inspect</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">findMergedAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;xxl-job method-jobhandler resolve error for bean[&quot;</span> <span class="token operator">+</span> beanDefinitionName <span class="token operator">+</span> <span class="token string">&quot;].&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotatedMethods<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> annotatedMethods<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//初始化</span>
        <span class="token comment">// generate and regist method job handler</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">XxlJob</span><span class="token punctuation">&gt;</span></span> methodXxlJobEntry <span class="token operator">:</span> annotatedMethods<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Method</span> executeMethod <span class="token operator">=</span> methodXxlJobEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">XxlJob</span> xxlJob <span class="token operator">=</span> methodXxlJobEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// regist</span>
            <span class="token comment">//注册</span>
            <span class="token function">registJobHandler</span><span class="token punctuation">(</span>xxlJob<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> executeMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>registJobHandler首先做了一系列校验和准备工作，包括：</p><ul><li>校验名称是否为空</li><li>校验是否存在同名job</li><li>将目标执行方法设置成可访问</li><li>注册jobHandler</li></ul><p>使用ConcurrentMap存储jobHandler。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IJobHandler</span><span class="token punctuation">&gt;</span></span> jobHandlerRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IJobHandler</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IJobHandler</span> <span class="token function">registJobHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">IJobHandler</span> jobHandler<span class="token punctuation">)</span><span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job register jobhandler success, name:{}, jobHandler:{}&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> jobHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> jobHandlerRepository<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> jobHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IJobHandler接口提供了init、execute、destory方法，并提供了几种实现，类结构如下图所示：</p><p><img src="`+e+`" alt="image-20221117180325512" loading="lazy"></p><ul><li>ScriptJobHandler ：任务使用GLUE(Shell)、GLUE(Python)、GLUE(PHP)、GLUE(Nodejs)、GLUE(PowerShell)运行模式</li><li>GlueJobHandler：任务使用GLUE(Java)运行模式</li><li>MethodJobHandler: 任务使用Bean运行模式</li></ul><p>至此<code>initJobHandlerMethodRepository(applicationContext)</code>逻辑大致分析到这里，GlueFactory.refreshInstance(1)提供了对象相关字段自动补齐，不再具体描述。着重关心start()里面的逻辑，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token comment">// init logpath</span>
    <span class="token comment">//初始化日志路径</span>
    <span class="token class-name">XxlJobFileAppender</span><span class="token punctuation">.</span><span class="token function">initLogPath</span><span class="token punctuation">(</span>logPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// init invoker, admin-client</span>
    <span class="token comment">//初始化admin-client</span>
    <span class="token function">initAdminBizList</span><span class="token punctuation">(</span>adminAddresses<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// init JobLogFileCleanThread</span>
    <span class="token comment">//启动日志文件清理线程</span>
    <span class="token class-name">JobLogFileCleanThread</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>logRetentionDays<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// init TriggerCallbackThread</span>
    <span class="token comment">//启动触发回调线程</span>
    <span class="token class-name">TriggerCallbackThread</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// init executor-server</span>
    <span class="token comment">//启动自研rpc</span>
    <span class="token function">initEmbedServer</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> appname<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注下initEmbedServer方法，核心逻辑是初始化内置的RPC服务：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>embedServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmbedServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
embedServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> port<span class="token punctuation">,</span> appname<span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖Netty实现自研RPC服务，核心代码如下</p><p><img src="`+o+`" alt="image-20221118164450768" loading="lazy"></p><p>EmbedHttpServerHandler继承了SimpleChannelInboundHandler，会对消息进行解析，并通过线程池异步处理后将结果返回。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">FullHttpRequest</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// request parse</span>
    <span class="token comment">//final byte[] requestBytes = ByteBufUtil.getBytes(msg.content());    // byteBuf.toString(io.netty.util.CharsetUtil.UTF_8);</span>
    <span class="token class-name">String</span> requestData <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> uri <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HttpMethod</span> httpMethod <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> keepAlive <span class="token operator">=</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">.</span><span class="token function">isKeepAlive</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> accessTokenReq <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">XxlJobRemotingUtil</span><span class="token punctuation">.</span><span class="token constant">XXL_JOB_ACCESS_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// invoke</span>
    bizThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// do invoke</span>
            <span class="token class-name">Object</span> responseObj <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>httpMethod<span class="token punctuation">,</span> uri<span class="token punctuation">,</span> requestData<span class="token punctuation">,</span> accessTokenReq<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// to json</span>
            <span class="token class-name">String</span> responseJson <span class="token operator">=</span> <span class="token class-name">GsonTool</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>responseObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// write response</span>
            <span class="token function">writeResponse</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> keepAlive<span class="token punctuation">,</span> responseJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册逻辑：</p><p><img src="`+c+'" alt="image-20221118165246047" loading="lazy"></p><div class="hint-container note"><p class="hint-container-title">注</p><p>当xxl-job-admin部署了多个服务时，HTTP默认都只会请求第一个，除非请求第一个服务抛出异常 ，才会请求其他admin服务。</p><p>注册使用Http请求进行通讯</p></div><p>至此，执行器的初始化逻辑已经结束，总流程如下图所示：</p><p><img src="'+l+'" alt="image-20221118170910059" loading="lazy"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>SmartInitializingSingleton中只有一个接口afterSingletonsInstantiated()，其作用是是 在spring容器管理的所有单例对象（非懒加载对象）初始化完成之后调用的回调接口。</li><li>DisposableBean在bean被销毁后调用。</li><li>XXL-JOB任务调度底层基于Netty实现。</li></ul>',35),k=[u];function r(d,m){return s(),a("div",null,k)}const g=n(i,[["render",r],["__file","02.XXL-JOB执行器启动流程分析.html.vue"]]);export{g as default};
