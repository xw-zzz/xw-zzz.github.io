import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,e as s,d as e,b as i}from"./app-ef0b4d9d.js";const o={},r=i(`<p>[TOC]</p><h2 id="record类" tabindex="-1"><a class="header-anchor" href="#record类" aria-hidden="true">#</a> record类</h2><p>record用于声明不可变数据类，没有record之前通常用final进行修饰表示数据不可变，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用record后</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public record Person(String name, int age) {
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="隐藏类" tabindex="-1"><a class="header-anchor" href="#隐藏类" aria-hidden="true">#</a> 隐藏类</h2><p>隐藏类的目标是允许在运行时创建不可发现的类。这意味着它们不能被其他类链接，也不能通过反射发现它们。此类类的生命周期通常较短，因此，隐藏类的设计在加载和卸载方面都非常高效。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>当前版本的Java确实允许创建类似于隐藏类的匿名类。然而，它们依赖于不安全API。隐藏类没有这样的依赖。</p></div><h2 id="匹配类型检查" tabindex="-1"><a class="header-anchor" href="#匹配类型检查" aria-hidden="true">#</a> 匹配类型检查</h2><p>对对象类型检查做了优化，目标是简化代码。之前代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Employee</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">)</span> person<span class="token punctuation">;</span>
    <span class="token class-name">Date</span> hireDate <span class="token operator">=</span> employee<span class="token punctuation">.</span><span class="token function">getHireDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新的写法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Date</span> hireDate <span class="token operator">=</span> employee<span class="token punctuation">.</span><span class="token function">getHireDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="外部内存访问加强" tabindex="-1"><a class="header-anchor" href="#外部内存访问加强" aria-hidden="true">#</a> 外部内存访问加强</h2><p>外部内存访问已经是Java 14的一个特性。在Java 15中，目标是继续其孵化状态，同时添加几个新特性</p><ul><li>一个新的VarHandle API，用于自定义内存访问变量句柄</li><li>支持使用Spliterator接口并行处理内存段</li><li>增强了对映射内存段的支持</li><li>能够操作来自本机调用之类的地址</li></ul><h2 id="垃圾收集器" tabindex="-1"><a class="header-anchor" href="#垃圾收集器" aria-hidden="true">#</a> 垃圾收集器</h2><p>ZGC和Shenandoah不再是实验特性，可以在生产环境进行使用。</p><h2 id="封闭类" tabindex="-1"><a class="header-anchor" href="#封闭类" aria-hidden="true">#</a> 封闭类</h2><p>Java没有提供对继承的细粒度控制。访问修饰符，如public、protected、private以及默认包-private，提供非常粗粒度的控制。为此，封闭类的目标是声明哪些子类可以继承。示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
    <span class="token keyword">permits</span> <span class="token class-name">Employee</span><span class="token punctuation">,</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>
 
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,23),d={href:"https://www.baeldung.com/java-15-new",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.oracle.com/java/technologies/javase/15-relnote-issues.html",target:"_blank",rel:"noopener noreferrer"};function k(v,m){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,n("ul",null,[n("li",null,[n("a",d,[s("https://www.baeldung.com/java-15-new"),e(a)])]),n("li",null,[n("a",u,[s("https://www.oracle.com/java/technologies/javase/15-relnote-issues.html"),e(a)])])])])}const g=t(o,[["render",k],["__file","11.JDK15新特性.html.vue"]]);export{g as default};
