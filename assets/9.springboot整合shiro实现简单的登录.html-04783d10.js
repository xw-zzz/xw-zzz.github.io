import{_ as b}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as h,c as f,f as i,a as l,d as n,w as s,e as a,b as r}from"./app-ef0b4d9d.js";const _="/assets/image-207707f9-5ce1e539.png",y="/assets/image-4edf74f7-7e1edd1a.png",w="/assets/image-2c72617e-20d4b103.png",A="/assets/image-cd633a13-b5bb0b0a.png",x="/assets/image-4e70b39b-8adf71f5.png",S={},j=l("h2",{id:"shiro核心知识",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#shiro核心知识","aria-hidden":"true"},"#"),a(" shiro核心知识")],-1),I=r('<ul><li>什么是身份认证 <ul><li>Authentication，身份证认证，一般就是登录</li></ul></li><li>什么是授权 <ul><li>Authorization，给用户分配角色或者访问某些资源的权限</li></ul></li><li>什么是会话管理 <ul><li>Session Management, 用户的会话管理员，多数情况下是web session</li></ul></li><li>什么是加密 <ul><li>Cryptography, 数据加解密，比如密码加解密等</li></ul></li></ul><h2 id="shiro常见名称讲解" tabindex="-1"><a class="header-anchor" href="#shiro常见名称讲解" aria-hidden="true">#</a> shiro常见名称讲解</h2><ul><li><p>Subject</p><ul><li>我们把用户或者程序称为主体（如用户，第三方服务，cron作业），主体去访问系统或者资源</li></ul></li><li><p>SecurityManager</p><ul><li>安全管理器，Subject的认证和授权都要在安全管理器下进行</li></ul></li><li><p>Authenticator</p><ul><li>认证器，主要负责Subject的认证</li></ul></li><li><p>Realm</p><ul><li>数据域，Shiro和安全数据的连接器，好比jdbc连接数据库； 通过realm获取认证授权相关信息</li></ul></li><li><p>Authorizer</p><ul><li>授权器，主要负责Subject的授权, 控制subject拥有的角色或者权限</li></ul></li><li><p>Cryptography</p><ul><li>加解密，Shiro的包含易于使用和理解的数据加解密方法，简化了很多复杂的api</li></ul></li><li><p>Cache Manager</p><ul><li>缓存管理器，比如认证或授权信息，通过缓存进行管理，提高性能</li></ul></li></ul><h2 id="springboot整合shiro" tabindex="-1"><a class="header-anchor" href="#springboot整合shiro" aria-hidden="true">#</a> springboot整合shiro</h2>',4),R=l("p",null,"引入maven依赖",-1),q=r(`<p>2、自定义realm</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xw<span class="token punctuation">.</span>shirostudy<span class="token punctuation">.</span>shiro</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xw<span class="token punctuation">.</span>shirostudy<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>xw<span class="token punctuation">.</span>shirostudy<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">UserRepository</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span></span><span class="token class-name">AuthorizationInfo</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span></span><span class="token class-name">AuthorizingRealm</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span></span><span class="token class-name">PrincipalCollection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * @Description TODO
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获取用户角色和权限
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 登录认证
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户&quot;</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">&quot;认证-----ShiroRealm.doGetAuthenticationInfo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findUserByUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownAccountException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名或密码错误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>password<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IncorrectCredentialsException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名或密码错误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockedAccountException</span><span class="token punctuation">(</span><span class="token string">&quot;账号已被锁定,请联系管理员！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">SimpleAuthenticationInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> info<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="登录验证源码分析" tabindex="-1"><a class="header-anchor" href="#登录验证源码分析" aria-hidden="true">#</a> 登录验证源码分析</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>认证流程解读：subject.login(usernamePasswordToken);
	DelegatingSubject-&gt;login()
	DefaultSecurityManager-&gt;login()
	AuthenticatingSecurityManager-&gt;authenticate()
	AbstractAuthenticator-&gt;authenticate()
	ModularRealmAuthenticator-&gt;doAuthenticate()
	ModularRealmAuthenticator-&gt;doSingleRealmAuthentication()
	AuthenticatingRealm-&gt;getAuthenticationInfo()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、首先将输入的账号密码生成UsernamePasswordToken对象，然后获取Subject对象，调用login方法。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> UsernamePasswordToken token = new UsernamePasswordToken(username, password);
 Subject subject = SecurityUtils.getSubject();
 subject.login(token);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、DelegatingSubject-&gt;login()<br><img src="`+_+'" alt="image.png" loading="lazy"></p><p>3、DefaultSecurityManager-&gt;login()<br><img src="'+y+'" alt="image.png" loading="lazy"><br> 4、 AbstractAuthenticator-&gt;authenticate()</p><p><img src="'+w+'" alt="image.png" loading="lazy"><br> 5、ModularRealmAuthenticator-&gt;doAuthenticate()<br> ModularRealmAuthenticator-&gt;doSingleRealmAuthentication()<br><img src="'+A+'" alt="image.png" loading="lazy"></p><p>6、最后到AuthenticatingRealm-&gt;doGetAuthenticationInfo()调自己实现的realm。<br><img src="'+x+'" alt="image.png" loading="lazy"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>shiro的流程控制是基于异常实现,提供了丰富的异常机制。</li><li>我们只需要关注业务逻辑进行开发，shiro已经提供良好的封装。</li></ul>',12),z={id:"完整代码链接",tabindex:"-1"},C=l("a",{class:"header-anchor",href:"#完整代码链接","aria-hidden":"true"},"#",-1),U={href:"https://github.com/2457081614/shiro-study",target:"_blank",rel:"noopener noreferrer"},E=l("p",null,"TIPS:❤️ debug流程走一遍加深理解哦",-1);function M(N,P){const t=p("groupId"),e=p("artifactId"),o=p("dependency"),c=p("scope"),d=p("optional"),k=p("exclusion"),m=p("exclusions"),u=p("version"),v=p("dependencies"),g=p("ExternalLinkIcon");return h(),f("div",null,[j,i("more"),I,l("ol",null,[l("li",null,[R,n(v,null,{default:s(()=>[n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.springframework.boot")]),_:1}),n(e,null,{default:s(()=>[a("spring-boot-starter-jdbc")]),_:1})]),_:1}),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.springframework.boot")]),_:1}),n(e,null,{default:s(()=>[a("spring-boot-starter-thymeleaf")]),_:1})]),_:1}),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.springframework.boot")]),_:1}),n(e,null,{default:s(()=>[a("spring-boot-starter-web")]),_:1})]),_:1}),i(`  <dependency>
             <groupId>org.mybatis.spring.boot</groupId>
             <artifactId>mybatis-spring-boot-starter</artifactId>
             <version>2.1.1</version>
         </dependency>`),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("mysql")]),_:1}),n(e,null,{default:s(()=>[a("mysql-connector-java")]),_:1}),n(c,null,{default:s(()=>[a("runtime")]),_:1})]),_:1}),i(" 添加JDBC依赖 "),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.springframework.boot")]),_:1}),n(e,null,{default:s(()=>[a("spring-boot-starter-jdbc")]),_:1})]),_:1}),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.projectlombok")]),_:1}),n(e,null,{default:s(()=>[a("lombok")]),_:1}),n(d,null,{default:s(()=>[a("true")]),_:1})]),_:1}),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.springframework.boot")]),_:1}),n(e,null,{default:s(()=>[a("spring-boot-starter-test")]),_:1}),n(c,null,{default:s(()=>[a("test")]),_:1}),n(m,null,{default:s(()=>[n(k,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.junit.vintage")]),_:1}),n(e,null,{default:s(()=>[a("junit-vintage-engine")]),_:1})]),_:1})]),_:1})]),_:1}),i("阿里数据库线程池"),i(` <dependency>
         <groupId>com.alibaba</groupId>
         <artifactId>druid</artifactId>
         <version>1.1.6</version>
     </dependency>`),i("shiro依赖"),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.apache.shiro")]),_:1}),n(e,null,{default:s(()=>[a("shiro-spring")]),_:1}),n(u,null,{default:s(()=>[a("1.4.0")]),_:1})]),_:1}),i("模板引擎"),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.springframework.boot")]),_:1}),n(e,null,{default:s(()=>[a("spring-boot-starter-thymeleaf")]),_:1})]),_:1}),i(" https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa "),n(o,null,{default:s(()=>[n(t,null,{default:s(()=>[a("org.springframework.boot")]),_:1}),n(e,null,{default:s(()=>[a("spring-boot-starter-data-jpa")]),_:1}),n(u,null,{default:s(()=>[a("2.2.0.RELEASE")]),_:1})]),_:1})]),_:1})])]),q,l("h4",z,[C,a(),l("a",U,[a("完整代码链接"),n(g)])]),E])}const B=b(S,[["render",M],["__file","9.springboot整合shiro实现简单的登录.html.vue"]]);export{B as default};
