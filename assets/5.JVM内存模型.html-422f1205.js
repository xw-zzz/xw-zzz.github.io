import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,f as t,a,e as i,b as o}from"./app-ef0b4d9d.js";const c="/assets/100-1663224588931-45-72d0ef7b.jpeg",r="/assets/image-a4187753-fb01c471.png",l={},p=a("hr",null,null,-1),d=a("p",null,[a("img",{src:c,alt:"",loading:"lazy"})],-1),u=a("h2",{id:"概述",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),i(" 概述")],-1),v=a("p",null,"JVM运行时数据区包括方法区、堆、虚拟机栈、本地方法栈、程序计数器等，其中方法区和堆属于线程共享数据，虚拟机栈、本地方法栈、程序计数器为线程隔离数据。",-1),h=o('<p><img src="'+r+`" alt="image.png" loading="lazy"></p><h3 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器" aria-hidden="true">#</a> 程序计数器</h3><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。因此程序计数器是线程隔离的，它需要保证每个线程能够正确的执行命令。（从汇编角度来看功能像EIP寄存器）</p><h3 id="虚拟机栈" tabindex="-1"><a class="header-anchor" href="#虚拟机栈" aria-hidden="true">#</a> 虚拟机栈</h3><p><strong>每个方法在执行的同时都会创建一个栈帧（Stack Framel）用于存储局部变量表、操作数栈、动态链接、方法出口等信息</strong>。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）以及对象引用（reference 类型）。<strong>虚拟机栈的内存不需要垃圾回收器回收</strong>。</p><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常。可以看下面demo。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> xw
 * @Description java虚拟机栈堆栈溢出测试
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackOverFlowErrorDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常信息如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Exception in thread &quot;main&quot; java.lang.StackOverflowError  
 at sun.nio.cs.UTF_8$Encoder.encodeLoop(UTF_8.java:691)  
 at java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:579)  
 at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:271)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p></div><h3 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈" aria-hidden="true">#</a> 本地方法栈</h3><p>与虚拟机栈类似，不过是作用于本地方法，即native方法。它们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务</p><h3 id="java堆" tabindex="-1"><a class="header-anchor" href="#java堆" aria-hidden="true">#</a> Java堆</h3><p>Java堆是Java内存区域中一块用来存放对象实例的区域，【几乎所有的对象实例都在这里分配内存】，也是 Java 虚拟机所管理的内存中最大的一块 Java 堆是被所有线程共享的一块内存区域，同时也是垃圾收集的主要区域。</p><ul><li>-Xmx 堆最大内存</li><li>-Xms 初始内存<br> 一般建议最大内存和初始内存保持一样大小。</li></ul><h3 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区" aria-hidden="true">#</a> 方法区</h3><p><strong>方法区是各个线程共享的内存区域</strong>，它用于存储已被虚拟机<strong>加载的类信息、常量、静态变量、即时编译器编译后的代码</strong>等数据。类信息包括<strong>类版本号、接口、方法</strong>。这块区域的回收目标主要是针对常量池的回收和类型的卸载。</p><h3 id="运行时常量池" tabindex="-1"><a class="header-anchor" href="#运行时常量池" aria-hidden="true">#</a> 运行时常量池</h3><p>运行时常量池是方法区的一部分，Class文件除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是<strong>常量池，用于存放编译器生成的各种字面量和符号引用</strong>，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><h3 id="直接内存" tabindex="-1"><a class="header-anchor" href="#直接内存" aria-hidden="true">#</a> 直接内存</h3><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现，本机直接内存的分配不会受到Java堆大小的限制，但是，既然是内存，肯定还是会受到本机总内存（包括RAM以及SWAP区或者分页文件）大小以及处理器寻址空间的限制。服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>JDK8 HotSpot JVM 将移除永久区，使用本地内存来存储类元数据信息并称之为：元空间（Metaspace）。</p></div>`,22);function m(k,b){return s(),e("div",null,[p,d,u,v,t("more"),h])}const f=n(l,[["render",m],["__file","5.JVM内存模型.html.vue"]]);export{f as default};
