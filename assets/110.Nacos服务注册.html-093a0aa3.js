import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as t}from"./app-ef0b4d9d.js";const p="/assets/image-20230727154216579-7465f105.png",e="/assets/image-20230801100422489-9664d58f.png",o="/assets/image-20230804171525808-79d8e0da.png",c="/assets/image-20230804172253613-9606ea5b.png",i={},l=t('<h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h1><p>从源码的角度对以下几个过程进行分析：</p><ul><li>客户端如何发起服务注册<a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B">110.Nacos服务注册</a></li><li>服务端处理客户端服务注册请求</li><li>服务状态健康检查</li><li>高并发支撑海量服务注册</li></ul><h1 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h1><h1 id="客户端注册流程" tabindex="-1"><a class="header-anchor" href="#客户端注册流程" aria-hidden="true">#</a> 客户端注册流程</h1><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>本文<strong>基于Spring Cloud服务注册</strong>来进行说明。</p></div><p>客户端向Nacos服务端进行服务注册是通过监听<code>WebServerInitializedEvent</code>事件进行触发，相关核心类结构如下图所示：<br><img src="'+p+`" alt="" loading="lazy"></p><ul><li><code>NacosAutoServiceRegistration</code>：该Bean会注册到上下文中，<code>监听WebServerInitializedEvent事件</code>，最终调用<code>NacosServiceRegistry#register</code>方法完成向Nacos注册。</li></ul><blockquote><p><code>WebServerInitializedEvent</code>是Spring Boot中的一个事件类，它在Web服务器（如Tomcat、Jetty等）初始化完成后触发。该事件是Spring Boot的一个应用程序事件，可以用于在应用程序启动后执行一些特定的操作。</p></blockquote><p>接下来看下<code>NacosServiceRegistry#register</code>执行流程，核心入口代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> serviceName<span class="token punctuation">,</span> <span class="token class-name">String</span> groupName<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NacosException</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 实例分为临时实例和永久实例，如果是临时实例才进行健康检查</span>
    <span class="token comment">// 默认都是临时实例</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">BeatInfo</span> beatInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeatInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        beatInfo<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        beatInfo<span class="token punctuation">.</span><span class="token function">setIp</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        beatInfo<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        beatInfo<span class="token punctuation">.</span><span class="token function">setCluster</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        beatInfo<span class="token punctuation">.</span><span class="token function">setWeight</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        beatInfo<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        beatInfo<span class="token punctuation">.</span><span class="token function">setScheduled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        beatInfo<span class="token punctuation">.</span><span class="token function">setPeriod</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getInstanceHeartBeatInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  

<span class="token comment">// 定时任务进行心跳健康检查，每隔5秒执行一次</span>
beatReactor<span class="token punctuation">.</span><span class="token function">addBeatInfo</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">,</span> beatInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
<span class="token comment">// 调用nacos接口进行注册服务   </span>
serverProxy<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span><span class="token class-name">NamingUtils</span><span class="token punctuation">.</span><span class="token function">getGroupedName</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">)</span><span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>nacos实例分为两种：临时实例和永久实例。</p><p>对于临时实例，客户端会定时的通过 RPC 连接或http向 Nacos 注册中心发送心跳，保持连接的存活。<strong>如果客户端和注册中心的连接断开，那么注册中心会主动剔除该 client 所注册的服务，达到下线的效果</strong>。同时 Nacos 注册中心还会在注册中心启动时，注册⼀个过期客户端清除的定时任务， 用于删除那些健康状态超过⼀段时间的客户端。</p><p>对于永久实例的的健康检查，Nacos 采用的是注册中心探测机制，注册中心会在永久服务初始化时 根据客户端选择的协议类型注册探活的定时任务。Nacos 现在内置提供了三种探测的协议，即 Http、TCP 以及 MySQL，<strong>并且将无法探测成功的实例标记为不健康</strong>。</p></blockquote><p>整体流程如下所示：</p><p><img src="`+e+'" alt="" loading="lazy"></p><h1 id="服务端处理服务注册请求流程" tabindex="-1"><a class="header-anchor" href="#服务端处理服务注册请求流程" aria-hidden="true">#</a> 服务端处理服务注册请求流程</h1><p>整体流程如下图所示：</p><p><img src="'+o+'" alt="" loading="lazy"></p><ul><li>com.alibaba.nacos.naming.controllers.InstanceController#register方法接收用户请求，调用registerInstance方法</li><li>添加服务实例，发布同步客户端事件，异步订阅将客户端信息推送给nacos集群</li><li>发布ClientRegisterServiceEvent事件，订阅端将服务改变事件推送给该服务的订阅者列表。</li></ul><p><img src="'+c+`" alt="" loading="lazy"></p><ul><li>发布InstanceMetadataEvent事件，异步订阅推送给订阅端。</li></ul><div class="hint-container note"><p class="hint-container-title">注</p><p>服务端服务注册流程只分析了临时实例的注册流程，持久实例注册的相关逻辑在com.alibaba.nacos.naming.core.v2.service.impl.PersistentClientOperationServiceImp,本文不再详细说明。</p></div><h1 id="服务下线流程" tabindex="-1"><a class="header-anchor" href="#服务下线流程" aria-hidden="true">#</a> 服务下线流程</h1><p>当客户端下线时，将会调用<code>AbstractAutoServiceRegistration#destroy</code>执行下线逻辑，方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PreDestroy</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>@PreDestroy</code> 是Java中的一个注解，它标记的方法会在对象被销毁之前调用</p></blockquote><p>stop方法主要由以下两个逻辑：</p><ul><li>移除心跳任务</li><li>调用服务端的客户端下线接口</li></ul><p>服务端客户端下线接口在<code>InstanceRequestHandler#deregisterInstance</code>，通过 grpc调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deregisterInstance</span><span class="token punctuation">(</span><span class="token class-name">Service</span> service<span class="token punctuation">,</span> <span class="token class-name">Instance</span> instance<span class="token punctuation">,</span> <span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ServiceManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containSingleton</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">SRV_LOG</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;remove instance from non-exist service: {}&quot;</span><span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Service</span> singleton <span class="token operator">=</span> <span class="token class-name">ServiceManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Client</span> client <span class="token operator">=</span> clientManager<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">clientIsLegal</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">InstancePublishInfo</span> removedInstance <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">removeServiceInstance</span><span class="token punctuation">(</span>singleton<span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">setLastUpdatedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">recalculateRevision</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> removedInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientOperationEvent<span class="token punctuation">.</span>ClientDeregisterServiceEvent</span><span class="token punctuation">(</span>singleton<span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NotifyCenter</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">MetadataEvent<span class="token punctuation">.</span>InstanceMetadataEvent</span><span class="token punctuation">(</span>singleton<span class="token punctuation">,</span> removedInstance<span class="token punctuation">.</span><span class="token function">getMetadataId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要做了以下操作：</p><ul><li>移除服务实例相关信息，包括元数据、实例剔除、实例推送相关信息</li><li>如果是集群，同步到其他节点</li></ul><h1 id="一致性协议实现" tabindex="-1"><a class="header-anchor" href="#一致性协议实现" aria-hidden="true">#</a> 一致性协议实现</h1><p>Nacos支持AP和CP两种方式，CP基于Raft协议实现，AP使用自研Distro协议实现。</p><h2 id="distro协议" tabindex="-1"><a class="header-anchor" href="#distro协议" aria-hidden="true">#</a> Distro协议</h2><p>Distro 协议的主要设计思想如下：</p><ul><li>Nacos 每个节点是平等的都可以处理写请求，同时把新数据同步到其他节点。</li><li>每个节点只负责部分数据，定时发送自己负责数据的校验值到其他节点来保持数据一致性。</li><li>每个节点独立处理读请求，及时从本地发出响应。</li></ul><h3 id="实现逻辑" tabindex="-1"><a class="header-anchor" href="#实现逻辑" aria-hidden="true">#</a> 实现逻辑</h3><p>在类<code>DistroProtocol</code>初始化时，会启动两个定时任务进行检查，分别是<code>startVerifyTask</code>和<code>startLoadTask</code>。</p><h5 id="startverifytask流程" tabindex="-1"><a class="header-anchor" href="#startverifytask流程" aria-hidden="true">#</a> startVerifyTask流程</h5><p><code>startVerifyTask</code>方法任务每隔5秒执行一次<code>DistroVerifyTimedTask</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//每隔5S执行一次 </span>
<span class="token class-name">GlobalExecutor</span><span class="token punctuation">.</span><span class="token function">schedulePartitionDataTimedSync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DistroVerifyTimedTask</span><span class="token punctuation">(</span>memberManager<span class="token punctuation">,</span> distroComponentHolder<span class="token punctuation">,</span>
                        distroTaskEngineHolder<span class="token punctuation">.</span><span class="token function">getExecuteWorkersManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token class-name">DistroConfig</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getVerifyIntervalMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行逻辑如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//获取其他节点</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Member</span><span class="token punctuation">&gt;</span></span> targetServer <span class="token operator">=</span> serverMemberManager<span class="token punctuation">.</span><span class="token function">allMembersWithoutSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;server list is: {}&quot;</span><span class="token punctuation">,</span> targetServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//根据类型进行验证，类型为协议类型</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> each <span class="token operator">:</span> distroComponentHolder<span class="token punctuation">.</span><span class="token function">getDataStorageTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">verifyForDataStorage</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> targetServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-FAILED] verify task failed.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">verifyForDataStorage</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Member</span><span class="token punctuation">&gt;</span></span> targetServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取存储类</span>
        <span class="token class-name">DistroDataStorage</span> dataStorage <span class="token operator">=</span> distroComponentHolder<span class="token punctuation">.</span><span class="token function">findDataStorage</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dataStorage<span class="token punctuation">.</span><span class="token function">isFinishInitial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;data storage {} has not finished initial step, do not send verify data&quot;</span><span class="token punctuation">,</span>
                    dataStorage<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//获取存储数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DistroData</span><span class="token punctuation">&gt;</span></span> verifyData <span class="token operator">=</span> dataStorage<span class="token punctuation">.</span><span class="token function">getVerifyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> verifyData <span class="token operator">||</span> verifyData<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Member</span> member <span class="token operator">:</span> targetServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">DistroTransportAgent</span> agent <span class="token operator">=</span> distroComponentHolder<span class="token punctuation">.</span><span class="token function">findTransportAgent</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> agent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//通过执行器执行</span>
            executeTaskExecuteEngine<span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>member<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> type<span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token class-name">DistroVerifyExecuteTask</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> verifyData<span class="token punctuation">,</span> member<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getVerifyData</code>代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DistroData</span><span class="token punctuation">&gt;</span></span> <span class="token function">getVerifyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DistroData</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> each <span class="token operator">:</span> clientManager<span class="token punctuation">.</span><span class="token function">allClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对每个本机所管理的注册客户端进行处理</span>
        <span class="token class-name">Client</span> client <span class="token operator">=</span> clientManager<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> client <span class="token operator">||</span> <span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">isEphemeral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 空的或者是非临时性的节点，不处理</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 如果是自己管理的客户端</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>clientManager<span class="token punctuation">.</span><span class="token function">isResponsibleClient</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 需要验证的数据就是每个节点的clientId和revision</span>
            <span class="token class-name">DistroClientVerifyInfo</span> verifyData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroClientVerifyInfo</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                                           client<span class="token punctuation">.</span><span class="token function">getRevision</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DistroKey</span> distroKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroKey</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DistroData</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroData</span><span class="token punctuation">(</span>distroKey<span class="token punctuation">,</span>
                                             <span class="token class-name">ApplicationUtils</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Serializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>verifyData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            data<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">DataOperation</span><span class="token punctuation">.</span><span class="token constant">VERIFY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由<code>DistroVerifyExecuteTask</code>处理待验证的数据，将自己负责的客户端信息通过RPC请求同步到其他节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">syncVerifyData</span><span class="token punctuation">(</span><span class="token class-name">DistroData</span> verifyData<span class="token punctuation">,</span> <span class="token class-name">String</span> targetServer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNoExistTarget</span><span class="token punctuation">(</span>targetServer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 本地节点的服务列表不包含目标服务，直接返回</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将目标服务器替换为自身服务器，以便可以进行回调。</span>
    verifyData<span class="token punctuation">.</span><span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTargetServer</span><span class="token punctuation">(</span>memberManager<span class="token punctuation">.</span><span class="token function">getSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建DistroDataRequest</span>
    <span class="token class-name">DistroDataRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistroDataRequest</span><span class="token punctuation">(</span>verifyData<span class="token punctuation">,</span> <span class="token class-name">DataOperation</span><span class="token punctuation">.</span><span class="token constant">VERIFY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Member</span> member <span class="token operator">=</span> memberManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>targetServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkTargetServerStatusUnhealthy</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span>
            <span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO] Cancel distro verify caused by target server {} unhealthy, key: {}&quot;</span><span class="token punctuation">,</span> targetServer<span class="token punctuation">,</span>
                  verifyData<span class="token punctuation">.</span><span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Response</span> response <span class="token operator">=</span> clusterRpcClientProxy<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>member<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">checkResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-FAILED] Verify distro data failed! key: {} &quot;</span><span class="token punctuation">,</span> verifyData<span class="token punctuation">.</span><span class="token function">getDistroKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="startloadtask" tabindex="-1"><a class="header-anchor" href="#startloadtask" aria-hidden="true">#</a> startLoadTask</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">GlobalExecutor</span><span class="token punctuation">.</span><span class="token function">submitLoadDataTask</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> distroConfig<span class="token punctuation">.</span><span class="token function">getLoadDataRetryDelayMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            loadCallback<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] load snapshot data success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        loadCallback<span class="token punctuation">.</span><span class="token function">onFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] load snapshot data failed. &quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>memberManager<span class="token punctuation">.</span><span class="token function">allMembersWithoutSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] waiting server list init...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>distroComponentHolder<span class="token punctuation">.</span><span class="token function">getDataStorageTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] waiting distro data storage register...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//获取所有协议类型,这里是GRPC</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> each <span class="token operator">:</span> distroComponentHolder<span class="token punctuation">.</span><span class="token function">getDataStorageTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadCompletedMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>loadCompletedMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            loadCompletedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> <span class="token function">loadAllDataSnapshotFromRemote</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">loadAllDataSnapshotFromRemote</span><span class="token punctuation">(</span><span class="token class-name">String</span> resourceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DistroTransportAgent</span> transportAgent <span class="token operator">=</span> distroComponentHolder<span class="token punctuation">.</span><span class="token function">findTransportAgent</span><span class="token punctuation">(</span>resourceType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DistroDataProcessor</span> dataProcessor <span class="token operator">=</span> distroComponentHolder<span class="token punctuation">.</span><span class="token function">findDataProcessor</span><span class="token punctuation">(</span>resourceType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> transportAgent <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token operator">==</span> dataProcessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] Can&#39;t find component for type {}, transportAgent: {}, dataProcessor: {}&quot;</span><span class="token punctuation">,</span>
                resourceType<span class="token punctuation">,</span> transportAgent<span class="token punctuation">,</span> dataProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Member</span> each <span class="token operator">:</span> memberManager<span class="token punctuation">.</span><span class="token function">allMembersWithoutSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取其他节点的快照数据，处理</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] load snapshot {} from {}&quot;</span><span class="token punctuation">,</span> resourceType<span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DistroData</span> distroData <span class="token operator">=</span> transportAgent<span class="token punctuation">.</span><span class="token function">getDatumSnapshot</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] it took {} ms to load snapshot {} from {} and snapshot size is {}.&quot;</span><span class="token punctuation">,</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">,</span> resourceType<span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token function">getDistroDataLength</span><span class="token punctuation">(</span>distroData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> result <span class="token operator">=</span> dataProcessor<span class="token punctuation">.</span><span class="token function">processSnapshot</span><span class="token punctuation">(</span>distroData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span>
                    <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] load snapshot {} from {} result: {}&quot;</span><span class="token punctuation">,</span> resourceType<span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                distroComponentHolder<span class="token punctuation">.</span><span class="token function">findDataStorage</span><span class="token punctuation">(</span>resourceType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finishInitial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Loggers</span><span class="token punctuation">.</span><span class="token constant">DISTRO</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[DISTRO-INIT] load snapshot {} from {} failed.&quot;</span><span class="token punctuation">,</span> resourceType<span class="token punctuation">,</span> each<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>startLoadTask</code>在启动的时候会同步其他节点的数据</li><li><code>DistroVerifyExecuteTask</code>将自己所管理的客户端信息同步到其他节点</li></ul><h1 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h1><p><strong>Nacos服务注册如何支撑高并发？</strong><br> Nacos服务注册采用内存队列进行注册，通过内存队列、线程池进行异步处理，提高并发量。接收到注册请求后将任务放进队列异步处理，同时将处理逻辑拆分异步处理。</p><p><strong>Nacos如何防止多节点并发读写冲突？</strong></p><ul><li>2.x版本采用ConcurrentMap</li><li>每个节点负责一部分客户端的写操作，减少读写冲突</li></ul>`,54),u=[l];function k(r,d){return s(),a("div",null,u)}const b=n(i,[["render",k],["__file","110.Nacos服务注册.html.vue"]]);export{b as default};
