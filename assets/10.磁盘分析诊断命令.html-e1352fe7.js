import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as r,c as a,a as s,e as l,d as o,b as i}from"./app-ef0b4d9d.js";const c="/assets/image-20221107155301380-189fc1f1.png",g="/assets/image-20221107160340329-82a12500.png",d={},p=i(`<h2 id="iostat" tabindex="-1"><a class="header-anchor" href="#iostat" aria-hidden="true">#</a> iostat</h2><p>iostat主要用于输出磁盘IO 和 CPU的统计信息。安装命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> sysstat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相关参数如下：</p>`,4),_=s("li",null,[s("strong",null,"-c："),l(" 显示CPU使用情况")],-1),u=s("li",null,[s("strong",null,"-d："),l(" 显示磁盘使用情况")],-1),m=s("strong",null,"-N：",-1),h={href:"https://so.csdn.net/so/search?q=%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},I=s("strong",null,"-n：",-1),k={href:"https://so.csdn.net/so/search?q=NFS&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},b=i("<li><strong>-k：</strong> 以 KB 为单位显示</li><li><strong>-m：</strong> 以 M 为单位显示</li><li><strong>-t：</strong> 报告每秒向终端读取和写入的字符数和CPU的信息</li><li><strong>-V：</strong> 显示版本信息</li><li><strong>-x：</strong> 显示详细信息</li><li><strong>-p：</strong>[磁盘] 显示磁盘和分区的情况</li>",6),v=i('<p>常用分析命令： <code>iostat -xd 2</code> 每隔2秒,显示一次设备统计信息。示例如下：</p><p><img src="'+c+`" alt="image-20221107155301380" loading="lazy"></p><p>相关属性解释如下：</p><ul><li><strong>tps</strong>:每秒钟发送到的I/O请求数。</li><li><strong>Blk_read/s</strong>:每秒读取的block数。</li><li><strong>Blk_wrtn/s</strong>:每秒写入的block数。</li><li><strong>Blk_read</strong>:读入的block总数。</li><li><strong>Blk_wrtn</strong>:写入的block总数。</li><li><strong>rrqm/s:</strong> 每秒进行 merge 的读操作数目。即 rmerge/s</li><li><strong>wrqm/s:</strong> 每秒进行 merge 的写操作数目。即 wmerge/s</li><li><strong>r/s:</strong> 每秒完成的读 I/O 设备次数。即 rio/s</li><li><strong>w/s:</strong> 每秒完成的写 I/O 设备次数。即 wio/s</li><li><strong>rkB/s:</strong> 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。</li><li><strong>wkB/s:</strong> 每秒写K字节数。是 wsect/s 的一半。</li><li><strong>avgrq-sz:</strong> 平均每次设备I/O操作的数据大小 (扇区)。</li><li><strong>avgqu-sz:</strong> 平均I/O队列长度。</li><li><strong>rsec/s:</strong> 每秒读扇区数。即 rsect/s</li><li><strong>wsec/s:</strong> 每秒写扇区数。即 wsect/s</li><li>**r_await:**每个读操作平均所需的时间，不仅包括硬盘设备读操作的时间，还包括了在kernel队列中等待的时间。</li><li>**w_await:**每个写操作平均所需的时间，不仅包括硬盘设备写操作的时间，还包括了在kernel队列中等待的时间。</li><li><strong>await:</strong> 平均每次设备I/O操作的等待时间 (毫秒)。</li><li><strong>svctm:</strong> 平均每次设备I/O操作的服务时间 (毫秒)。</li><li><strong>%util:</strong> 一秒中有百分之多少的时间用于 I/O 操作，即被io消耗的cpu百分比</li></ul><blockquote><p>我们分析IO问题时，如果await大于svctm，await-svctm差值越小，则说明队列时间越短, 反之差值越大，队列时间越长，说明磁盘io有性能问题。</p></blockquote><h2 id="iotop" tabindex="-1"><a class="header-anchor" href="#iotop" aria-hidden="true">#</a> iotop</h2><p>查看占用磁盘io最大的几个进程。</p><p>安装命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> iotop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相关参数：</p><ul><li>-o，只显示正在产生I/O的进程或线程，运行过程中，可以通过按o随时切换</li><li>-b，非交互式下运行，一般用来记录日志</li><li>-n NUM，设置监控（显示）次数，主要用于非交互式，默认无限</li><li>-d SEC，设置显示的间隔秒数，支持非整数</li><li>-p PID，只显示指定进程（PID）的信息</li><li>-u USER，显示指定用户的进程信息</li><li>-P，只显示进程，不显示所有线程</li><li>-a，累积的I/O，显示从iotop启动后每个进程累积的I/O总数，便于诊断问题</li><li>-k，显示使用KB单位</li><li>-t，非交互模式下，加上时间戳</li><li>-q，只在第一次监测时显示列名.</li></ul><p>示例如下：</p><p><img src="`+g+'" alt="image-20221107160340329" loading="lazy"></p><p>相关属性解释如下：</p><ul><li>Total DISK READ：从磁盘中读取的总速率</li><li>Total DISK WRITE：往磁盘里写入的总速率</li><li>Actual DISK READ：从磁盘中读取的实际速率</li><li>Actual DISK WRITE：往磁盘里写入的实际速率</li><li>TID：线程ID，按p可转换成进程ID</li><li>PRIO：优先级</li><li>USER：线程所有者</li><li>DISK READ：从磁盘中读取的速率</li><li>DISK WRITE：往磁盘里写入的速率</li><li>SWAPIN：swap交换百分比</li><li>IO&gt;：IO等待所占用的百分比</li></ul>',15);function f(w,E){const t=e("ExternalLinkIcon");return r(),a("div",null,[p,s("ul",null,[_,u,s("li",null,[m,l(" 显示"),s("a",h,[l("磁盘阵列"),o(t)]),l("(LVM) 信息")]),s("li",null,[I,l(" 显示"),s("a",k,[l("NFS"),o(t)]),l(" 使用情况")]),b]),v])}const B=n(d,[["render",f],["__file","10.磁盘分析诊断命令.html.vue"]]);export{B as default};
