import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as a,b as i}from"./app-ef0b4d9d.js";const t={},d=i('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><strong>Kubernetes</strong> 这个名字源于希腊语，意为“舵手”或“飞行员”，Kubernetes是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，简称K8S，K8S的本质是一组服务器集群，可以在对应服务器集群的每个节点上运行程序，来对节点中的容器进行管理。</p><h2 id="常见功能" tabindex="-1"><a class="header-anchor" href="#常见功能" aria-hidden="true">#</a> 常见功能</h2><ul><li><strong>服务发现和负载均衡</strong><ul><li>Kubernetes 可以使用 DNS 名称或自己的 IP 地址来暴露容器。</li><li>如果进入容器的流量很大， Kubernetes 能够自动实现请求的负载均衡分配网络流量，从而使部署稳定</li></ul></li><li><strong>存储编排</strong><ul><li>Kubernetes 允许自动挂载选择的存储系统，例如本地存储、云提供商存储等。</li></ul></li><li><strong>自动部署和回滚</strong><ul><li>可以用k8s自动化部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。</li><li>当版本发布错误，可以立刻回退到之前的版本</li></ul></li><li><strong>自我修复</strong><ul><li>如果某个容器宕机了，K8S 可以快速重新启动新的的容器，替换旧的容器</li></ul></li><li><strong>密钥与配置管理</strong><ul><li>K8S允许存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥</li></ul></li></ul><h2 id="组件介绍" tabindex="-1"><a class="header-anchor" href="#组件介绍" aria-hidden="true">#</a> 组件介绍</h2><h3 id="master组件" tabindex="-1"><a class="header-anchor" href="#master组件" aria-hidden="true">#</a> Master组件</h3><p>Master组件是集群的控制平台（control plane）：</p><ul><li>master 组件负责集群中的全局决策（例如，调度）</li><li>master 组件探测并响应集群事件（例如，当 Deployment 的实际 Pod 副本数未达到 <code>replicas</code> 字段的规定时，启动一个新的 Pod）</li></ul><p>Master组件可以运行于集群中的任何机器上。但是，为了简洁性，通常在同一台机器上运行所有的 master 组件，且不在此机器上运行用户的容器。。</p><h4 id="kube-apiserver" tabindex="-1"><a class="header-anchor" href="#kube-apiserver" aria-hidden="true">#</a> kube-apiserver</h4><p>此 master 组件提供 Kubernetes API。这是Kubernetes控制平台的前端（front-end），可以水平扩展（通过部署更多的实例以达到性能要求）。kubectl / kubernetes dashboard / kuboard 等Kubernetes管理工具就是通过 kubernetes API 实现对 Kubernetes 集群的管理。</p><h4 id="etcd" tabindex="-1"><a class="header-anchor" href="#etcd" aria-hidden="true">#</a> etcd</h4><p>支持一致性和高可用的名值对存储组件，Kubernetes集群的所有配置信息都存储在 etcd 中。</p><h4 id="kube-scheduler" tabindex="-1"><a class="header-anchor" href="#kube-scheduler" aria-hidden="true">#</a> kube-scheduler</h4><p>此 master 组件监控所有新创建尚未分配到节点上的 Pod，并且自动选择为 Pod 选择一个合适的节点去运行。</p><p>影响调度的因素有：</p><ul><li>单个或多个 Pod 的资源需求</li><li>硬件、软件、策略的限制</li><li>亲和与反亲和（affinity and anti-affinity）的约定</li><li>数据本地化要求</li><li>工作负载间的相互作用</li></ul><h4 id="kube-controller-manager" tabindex="-1"><a class="header-anchor" href="#kube-controller-manager" aria-hidden="true">#</a> kube-controller-manager</h4><p>此 master 组件运行了所有的控制器</p><p>逻辑上来说，每一个控制器是一个独立的进程，但是为了降低复杂度，这些控制器都被合并运行在一个进程里。</p><p>kube-controller-manager 中包含的控制器有：</p><ul><li>节点控制器： 负责监听节点停机的事件并作出对应响应</li><li>副本控制器： 负责为集群中每一个 副本控制器对象（Replication Controller Object）维护期望的 Pod 副本数</li><li>端点（Endpoints）控制器：负责为端点对象（Endpoints Object，连接 Service 和 Pod）赋值</li><li>Service Account &amp; Token控制器： 负责为新的名称空间创建 default Service Account 以及 API Access Token</li></ul><h3 id="node-组件" tabindex="-1"><a class="header-anchor" href="#node-组件" aria-hidden="true">#</a> Node 组件</h3><p>Node 组件运行在每一个节点上（包括 master 节点和 worker 节点），负责维护运行中的 Pod 并提供 Kubernetes 运行时环境。</p><h4 id="kubelet" tabindex="-1"><a class="header-anchor" href="#kubelet" aria-hidden="true">#</a> kubelet</h4><p>此组件是运行在每一个集群节点上的代理程序。它确保 Pod 中的容器处于运行状态。Kubelet 通过多种途径获得 PodSpec 定义，并确保 PodSpec 定义中所描述的容器处于运行和健康的状态。Kubelet不管理不是通过 Kubernetes 创建的容器。</p><h4 id="kube-proxy" tabindex="-1"><a class="header-anchor" href="#kube-proxy" aria-hidden="true">#</a> kube-proxy</h4><p>kube-proxy是一个网络代理程序，运行在集群中的每一个节点上，是实现 Kubernetes Service 概念的重要部分。</p><h4 id="容器引擎" tabindex="-1"><a class="header-anchor" href="#容器引擎" aria-hidden="true">#</a> 容器引擎</h4><p>容器引擎负责运行容器。</p><h3 id="addons" tabindex="-1"><a class="header-anchor" href="#addons" aria-hidden="true">#</a> Addons</h3><p>Addons 使用 Kubernetes 资源（DaemonSet、Deployment等）实现集群的功能特性。由于他们提供集群级别的功能特性，addons使用到的Kubernetes资源都放置在 <code>kube-system</code> 名称空间下。</p><h4 id="dns" tabindex="-1"><a class="header-anchor" href="#dns" aria-hidden="true">#</a> DNS</h4><p>除了 DNS Addon 以外，其他的 addon 都不是必须的，所有 Kubernetes 集群都应该有 Cluster DNS，Cluster DNS 是一个 DNS 服务器，是对您已有环境中其他 DNS 服务器的一个补充，存放了 Kubernetes Service 的 DNS 记录。Kubernetes 启动容器时，自动将该 DNS 服务器加入到容器的 DNS 搜索列表中。</p>',34),n=[d];function l(s,o){return r(),a("div",null,n)}const c=e(t,[["render",l],["__file","0.介绍.html.vue"]]);export{c as default};
