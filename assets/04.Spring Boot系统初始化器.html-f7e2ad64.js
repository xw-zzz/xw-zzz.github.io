import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,b as p}from"./app-ef0b4d9d.js";const t="/assets/image-20221203211710185-27dcd0d2.png",e="/assets/image-20221203212255476-580b1f4c.png",o="/assets/image-20221203213354862-3f71699c.png",i={},c=p(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>系统初始化器类名为<code>ApplicationContextInitializer</code>，是<code>ApplicationContextInitializerSpring.initialize</code>容器刷新之前执行的一个回调函数，作用是向SpringBoot容器中注册属性。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p>声明自定义初始化器注入属性到容器中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tech<span class="token punctuation">.</span>xiangwang<span class="token punctuation">.</span>sbdemo<span class="token punctuation">.</span>initializer</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContextInitializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableEnvironment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">MapPropertySource</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span>:
 * <span class="token keyword">@author</span>: blog.xiangwang.tech
 * <span class="token keyword">@create</span>: 2022-12-03 16:57
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableEnvironment</span> environment <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span> <span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MapPropertySource</span> mapPropertySource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapPropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;first&quot;</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>mapPropertySource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;run TestInitializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有三种方式将初始化器进行注册：</p><ul><li><p>定义在<code>src/main/resources/META-INF/spring.factories</code>文件中被<code>SpringFactoriesLoader</code>注册发现。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.context.ApplicationContextInitializer</span> <span class="token punctuation">=</span><span class="token value attr-value">tech.xiangwang.sbdemo.initializer.TestInitializer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>SpringApplication初始化完毕后手动添加</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">SbDemoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span> springApplication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">SbDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        springApplication<span class="token punctuation">.</span><span class="token function">addInitializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        springApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>src/main/resources/application.properties</code>定义成环境变量被<code>DelegatingApplicationContextInitializer</code>发现注册。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">context.initializer.classes</span><span class="token punctuation">=</span><span class="token value attr-value">tech.xiangwang.sbdemo.initializer.TestInitializer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h2><p>SpringFactoriesLoader 读取初始化器代码如下</p><p><img src="`+t+'" alt="image-20221203211710185" loading="lazy"></p><p>进一步查看<code>org.springframework.core.io.support.SpringFactoriesLoader#loadFactoryNames</code>方法，</p><blockquote><p>流程：从classpath下多个jar包读取META-INF/spring.factories读取文件并初始化类，文件内容必须是kv形式，即properties类型，key是全限定名（接口、抽象类）、value是实现，多个实现用,分隔</p></blockquote><p><img src="'+e+'" alt="image-20221203212255476" loading="lazy"></p><p>初始化器执行时机在准备上下文阶段，<code>org.springframework.boot.SpringApplication#applyInitializers</code> 方法会将上方法返回的初始化器进行初始化操作，debug视图如下，</p><p><img src="'+o+'" alt="image-20221203213354862" loading="lazy"></p><blockquote><p>排序根据Order从小到大的顺序进行依次执行</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>初始化器用于向容器中注册属性和环境配置</li><li><code>SpringFactoriesLoader</code>这个类实现了检索META-INF/spring.factories文件，并获取指定接口的配置的功能。在很多内置的start模块有使用到了该配置，可以做到自动配置，达到开箱即用的效果。</li></ul>',18),l=[c];function u(r,k){return s(),a("div",null,l)}const v=n(i,[["render",u],["__file","04.Spring Boot系统初始化器.html.vue"]]);export{v as default};
