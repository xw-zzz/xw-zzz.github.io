import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,b as e}from"./app-ef0b4d9d.js";const t="/assets/image-20221205111422388-8cb8e9ee.png",p="/assets/image-20221205111914819-d1f29510.png",i="/assets/image-20221205140849657-74218a9f.png",c="/assets/image-20221205142942677-0640c16e.png",o="/assets/image-20221205143731093-1670222254973-1-70ef1192.png",l={},u=e('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>监听由三部分组成：事件、监听器、广播器组成。</p><h2 id="系统内置监听器" tabindex="-1"><a class="header-anchor" href="#系统内置监听器" aria-hidden="true">#</a> 系统内置监听器</h2><ul><li>广播器核心类为 <code>ApplicationEventMulticaster</code>，主要由三个方法：添加监听器、移除监听器、广播事件</li><li>系统监听器类：<code>ApplicationListener</code></li><li>事件类：<code>ApplicationEvent</code></li></ul><p>Spring Boot内置了很多的系统事件，关乎应用启动各个节点，其类图如下：</p><p><img src="'+t+'" alt="image-20221205111422388" loading="lazy"></p><ul><li>ApplicationStartingEvent: run方法首次启动时立即调用</li><li>ApplicationEnvironmentPreparedEvent: 环境准备之后 创建Appplicationcontex之前</li><li>ApplicationContextInitializedEvent: 创建applicationContext之后 未加载任何bean之前</li><li>ApplicationPreparedEvent: 在应用程序上下文已加载但尚未刷新之前调用</li><li>ApplicationStartedEvent: 上下文已刷新应用程序已启动但尚未调用 未调用applicationRunner和CommandLineRunner</li><li>ApplicationReadyEvent: 调用所有CommandLineRunner和applicationRunner之后</li><li>ApplicationFailedEvent: 异常错误时</li></ul><p>各事件在Spring Boot启动的执行顺序如下：</p><p><img src="'+p+'" alt="image-20221205111914819" loading="lazy"></p><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>内置监听器的初始化与系统初始化器过程类似，都是读取<code>spring.factories</code>配置文件实现，关键代码如下：</p><p><img src="'+i+'" alt="image-20221205140849657" loading="lazy"></p><h3 id="发布实现" tabindex="-1"><a class="header-anchor" href="#发布实现" aria-hidden="true">#</a> 发布实现</h3><p>在<code>EventPublishingRunListener</code>类中有对应用启动各阶段事件广播的逻辑。以启动事件为例，广播器会发布<code>ApplicationStartingEvent</code>事件。</p><p><img src="'+c+`" alt="image-20221205142942677" loading="lazy"></p><h2 id="自定义监听器" tabindex="-1"><a class="header-anchor" href="#自定义监听器" aria-hidden="true">#</a> 自定义监听器</h2><h3 id="_1-自定义监听应用准备事件" tabindex="-1"><a class="header-anchor" href="#_1-自定义监听应用准备事件" aria-hidden="true">#</a> 1. 自定义监听应用准备事件</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomeApplicationReadyListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;application is ready&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下：</p><p><img src="`+o+`" alt="image-20221205143731093" loading="lazy"></p><h3 id="_2-自定义事件监听" tabindex="-1"><a class="header-anchor" href="#_2-自定义事件监听" aria-hidden="true">#</a> 2. 自定义事件监听</h3><p>声明事件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">TestEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明监听：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">TestEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;message =&quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发布事件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XwSbdemoApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">XwSbdemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

        applicationContext<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestEvent</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;HELLO WORLD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>实现<code>ApplicationListener</code>或者<code>SmartApplicationListener</code>接口可实现自定义监听器，<code>SmartApplicationListener</code>可以同时监听多个事件，<code>ApplicationListener</code>只能监听一个事件。</li><li>事件监听默认是同步执行，如果需要异步执行可以通过 <code>@Async</code>实现</li></ul>`,29),d=[u];function r(k,v){return a(),s("div",null,d)}const b=n(l,[["render",r],["__file","05.Spring Boot监听器.html.vue"]]);export{b as default};
