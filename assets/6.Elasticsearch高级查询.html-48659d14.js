import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,b as t}from"./app-ef0b4d9d.js";const p="/assets/image-20230703224016963-1fcafa54.png",o={},e=t(`<h1 id="生成测试数据" tabindex="-1"><a class="header-anchor" href="#生成测试数据" aria-hidden="true">#</a> 生成测试数据</h1><p>执行以下命令，生成测试数据。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /account/_bulk
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">&quot;balance&quot;</span><span class="token operator">:</span><span class="token number">39225</span><span class="token punctuation">,</span><span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Amber&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Duke&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;880 Holmes Lane&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;employer&quot;</span><span class="token operator">:</span><span class="token string">&quot;Pyrami&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;amberduke@pyrami.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Brogan&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token string">&quot;IL&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token property">&quot;balance&quot;</span><span class="token operator">:</span><span class="token number">5686</span><span class="token punctuation">,</span><span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Hattie&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Bond&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;671 Bristol Street&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;employer&quot;</span><span class="token operator">:</span><span class="token string">&quot;Netagy&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;hattiebond@netagy.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Dante&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token string">&quot;TN&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;13&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token property">&quot;balance&quot;</span><span class="token operator">:</span><span class="token number">32838</span><span class="token punctuation">,</span><span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Nanette&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Bates&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;789 Madison Street&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;employer&quot;</span><span class="token operator">:</span><span class="token string">&quot;Quility&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;nanettebates@quility.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Nogal&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token string">&quot;VA&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;18&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token property">&quot;balance&quot;</span><span class="token operator">:</span><span class="token number">4180</span><span class="token punctuation">,</span><span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Dale&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Adams&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;467 Hutchinson Court&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;employer&quot;</span><span class="token operator">:</span><span class="token string">&quot;Boink&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;daleadams@boink.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Orick&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token string">&quot;MD&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token property">&quot;balance&quot;</span><span class="token operator">:</span><span class="token number">16418</span><span class="token punctuation">,</span><span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Elinor&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Ratliff&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;282 Kings Place&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;employer&quot;</span><span class="token operator">:</span><span class="token string">&quot;Scentric&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;elinorratliff@scentric.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Ribera&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token string">&quot;WA&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token property">&quot;balance&quot;</span><span class="token operator">:</span><span class="token number">40540</span><span class="token punctuation">,</span><span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Virginia&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Ayala&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;171 Putnam Avenue&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;employer&quot;</span><span class="token operator">:</span><span class="token string">&quot;Filodyne&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;virginiaayala@filodyne.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Nicholson&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token string">&quot;PA&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;32&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token property">&quot;balance&quot;</span><span class="token operator">:</span><span class="token number">48086</span><span class="token punctuation">,</span><span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Dillard&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Mcpherson&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;702 Quentin Street&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;employer&quot;</span><span class="token operator">:</span><span class="token string">&quot;Quailcom&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;dillardmcpherson@quailcom.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Veguita&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token string">&quot;IN&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;37&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;account_number&quot;</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token property">&quot;balance&quot;</span><span class="token operator">:</span><span class="token number">18612</span><span class="token punctuation">,</span><span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Mcgee&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;lastname&quot;</span><span class="token operator">:</span><span class="token string">&quot;Mooney&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token property">&quot;gender&quot;</span><span class="token operator">:</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;826 Fillmore Place&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;employer&quot;</span><span class="token operator">:</span><span class="token string">&quot;Reversus&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;mcgeemooney@reversus.com&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;Tooleville&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="dsl查询操作" tabindex="-1"><a class="header-anchor" href="#dsl查询操作" aria-hidden="true">#</a> DSL查询操作</h1><h2 id="term查询" tabindex="-1"><a class="header-anchor" href="#term查询" aria-hidden="true">#</a> term查询</h2><p>Term查询是Elasticsearch中的一种查询类型，用于<strong>精确匹配某个字段的值</strong>。它在查询过程中不会对搜索词进行分析，而是直接按照给定的词项进行匹配。示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;firstname.keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Amber&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="match查询" tabindex="-1"><a class="header-anchor" href="#match查询" aria-hidden="true">#</a> match查询</h2><p>示例 如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;firstname&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Amber&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>从示例看term与match作用差不多，都是匹配某个字段的值，但是它们在查询方式和匹配规则上有一些区别：</p><ul><li><strong>分析与不分析</strong>：Match查询会对搜索词进行分析，而Term查询则不会。Match查询会将搜索词进行分词处理，生成词项后再进行匹配。Term查询直接按照给定的搜索词进行匹配，不进行分析。</li><li><strong>匹配方式</strong>：Match查询使用的是全文匹配，它会将搜索词与字段中的文本进行匹配。它可以处理多词项、模糊匹配和相似度评分等。Term查询则是精确匹配，只会匹配完全相同的词项。</li><li><strong>字段类型</strong>：Match查询可以用于任何字段类型，而Term查询主要用于精确匹配字段，如关键字字段或不需要分析的字段。对于文本字段，建议使用Match查询，而对于关键字字段或精确匹配要求较高的字段，可以使用Term查询。</li><li><strong>性能</strong>：由于Match查询会进行分析和评分计算，它的查询速度可能比Term查询慢一些。Term查询直接按照给定的词项进行匹配，通常更快速。</li></ul><p>总结起来，Match查询适用于全文搜索和处理自然语言查询，能够处理分词、模糊匹配和评分等功能。而Term查询适用于精确匹配，不进行分析，性能更高。</p></div><h2 id="match-phrase" tabindex="-1"><a class="header-anchor" href="#match-phrase" aria-hidden="true">#</a> match_phrase</h2><p>Match Phrase查询会将搜索词作为一个短语进行匹配，保持搜索词中的单词顺序，并且要求文档中的字段包含完全相同的短语。它不会对搜索词进行分词处理，而是将整个搜索词作为一个单元进行匹配。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;match_phrase&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;880&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认必须保持顺序才能 够查询出来，如果需要乱序，添加slop参数：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;match_phrase&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Holmes 880&quot;</span>
        <span class="token punctuation">,</span> <span class="token property">&quot;slop&quot;</span><span class="token operator">:</span> <span class="token number">2</span> 
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="wildcard查询" tabindex="-1"><a class="header-anchor" href="#wildcard查询" aria-hidden="true">#</a> wildcard查询</h2><p>wildcard用于基于通配符模式匹配字段值。它可以在查询时使用通配符字符（*和?）来代替部分或全部字符，以便进行模糊匹配。</p><p>Wildcard查询使用通配符字符来匹配字段值，其中：</p><ul><li><code>*</code> 表示零个或多个字符。</li><li><code>?</code> 表示一个单个字符。</li></ul><p>示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;wildcard&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;firstname.keyword&quot;</span><span class="token operator">:</span><span class="token string">&quot;Am*&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="range查询" tabindex="-1"><a class="header-anchor" href="#range查询" aria-hidden="true">#</a> Range查询</h2><p>范围查询，示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token number">40</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fuzzy查询" tabindex="-1"><a class="header-anchor" href="#fuzzy查询" aria-hidden="true">#</a> Fuzzy查询</h2><p>Fuzzy查询是Elasticsearch中的一种查询类型，用于模糊匹配字段值。它可以在查询时允许一定程度的编辑距离（即字符的插入、删除或替换）来匹配字段值，从而实现近似匹配。Fuzzy查询通过计算查询词与文档中字段值之间的编辑距离来确定匹配程度。编辑距离表示将一个字符串转换为另一个字符串所需的最少编辑操作次数。这些操作可以是插入、删除或替换字符。示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;fuzzy&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;firstname.keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span><span class="token string">&quot;Ambxr&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bool查询" tabindex="-1"><a class="header-anchor" href="#bool查询" aria-hidden="true">#</a> Bool查询</h2><p>Bool查询是Elasticsearch中的一种复合查询，用于组合多个查询条件。它通过逻辑运算符（AND、OR、NOT）以及子查询来构建复杂的查询逻辑。</p><p>Bool查询由以下四个主要组件构成：</p><ol><li><strong>Must查询</strong>：所有Must查询条件都必须满足才能匹配文档。它们使用逻辑运算符AND组合在一起。</li><li><strong>Should查询</strong>：Should查询条件中的任意一个满足即可匹配文档。它们使用逻辑运算符OR组合在一起。可以指定Should查询条件的最小匹配数量（<code>minimum_should_match</code>），以控制匹配的灵活性。</li><li><strong>Must Not查询</strong>：Must Not查询条件必须不满足才能匹配文档。它们使用逻辑运算符NOT组合在一起。</li><li><strong>filter查询</strong>：必须出现在⽂档中，但是不打分</li></ol><p>示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;must&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;firstname.keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Dillard&quot;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;should&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;balance&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
            <span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token number">22222220</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;must_not&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token property">&quot;state.keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MD&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;gender.keyword&quot;</span><span class="token operator">:</span> <span class="token string">&quot;F&quot;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="排序查询" tabindex="-1"><a class="header-anchor" href="#排序查询" aria-hidden="true">#</a> 排序查询</h2><p>在Elasticsearch中，可以使用排序查询（Sort Query）对搜索结果进行排序。排序查询允许你指定一个或多个字段作为排序依据，并指定排序的方式（升序或降序）。</p><p>示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>## 根据年纪升序排序，年纪一样按照余额逆序排序
GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
     <span class="token punctuation">{</span>
      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token string">&quot;asc&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;balance&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合查询-指标聚合" tabindex="-1"><a class="header-anchor" href="#聚合查询-指标聚合" aria-hidden="true">#</a> 聚合查询(指标聚合)</h2><p>在Elasticsearch中，聚合查询（Aggregation Query）用于对搜索结果进行统计分析和聚合操作，以便获取关于数据的汇总信息。聚合查询能够提供诸如计数、求和、平均值、最大值、最小值、分组等统计结果。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>## 求平均余额
GET /account/_search
{
  &quot;query&quot;: {
    &quot;match_all&quot;: {}
  },
  &quot;aggs&quot;: {
    &quot;avage-balance&quot;: {
      &quot;avg&quot;: {
        &quot;field&quot;: &quot;balance&quot;
      }
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用操作如下：</p><ul><li><p>max min sum avg</p></li><li><p>value_count：统计⾮空字段的⽂档数</p></li><li><p>Cardinality 值去重计数</p></li><li><p>stats：统计count max min avg sum 5个值</p></li><li><p>Extended stats：⽐stats多4个统计结果： 平⽅和、⽅差、标准差、平均值加/减两个标准差的区间</p></li><li><p>Percentiles：占⽐百分位对应的值统计，默认返回[ 1, 5, 25, 50, 75, 95, 99 ]分位上的值，示例如下：</p><p><img src="`+p+`" alt="image-20230703224016963" loading="lazy"></p></li></ul><p>表示有25%的值小于32.5,50%的值小于35.....</p><h2 id="聚合查询-桶聚合" tabindex="-1"><a class="header-anchor" href="#聚合查询-桶聚合" aria-hidden="true">#</a> 聚合查询(桶聚合)</h2><p>桶聚合（Bucket Aggregation）是Elasticsearch中的一种聚合类型，用于按照指定的条件将文档分组到不同的桶中，然后对每个桶内的文档进行统计分析。桶聚合可用于对数据进行分组、分段、分级等操作，以获取更细粒度的统计结果。</p><p>桶聚合有多种类型，常用的包括：</p><ol><li><strong>Terms聚合</strong>：按照指定字段的值进行分组，并返回每个分组的文档数量。可以获取分组的Top N结果。</li><li><strong>Date Histogram聚合</strong>：按照日期字段进行分组，并将时间段划分为固定间隔的桶，用于时间序列数据的分析。</li><li><strong>Range聚合</strong>：根据指定的范围条件将文档分配到不同的桶中，用于对数值型字段进行范围分组。</li><li><strong>Nested聚合</strong>：对嵌套文档进行分组和统计分析。</li></ol><p>示例如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>## 根据年纪进行分组
GET /account/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;aggs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;ages&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;terms&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">10</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="sql查询" tabindex="-1"><a class="header-anchor" href="#sql查询" aria-hidden="true">#</a> SQL查询</h1><p>在Elasticsearch中，可以使用SQL查询来执行SQL语句，以便对索引中的数据进行查询和分析。Elasticsearch提供了SQL查询的功能，可以使用SQL语法来编写查询语句，类似于传统的关系型数据库。</p><p>示例：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>POST /_sql?format=json
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span>&quot;
  SELECT * FROM <span class="token string">&quot;account&quot;</span>
  <span class="token string">&quot;&quot;</span>&quot;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>SQL查询在某些情况下可能会受到性能限制，尤其是在大规模数据集上进行复杂查询时。导致性能下降的原因有如下几个：</p><ol><li><strong>数据模型不匹配：</strong> Elasticsearch是一个分布式文档型数据库，其数据模型与传统的关系型数据库不同。关系型数据库通常使用规范化模型，而Elasticsearch更适合使用冗余和扁平化的数据模型。如果将传统的关系型数据库的查询直接转换为SQL查询，并没有充分利用Elasticsearch的数据模型和查询优化功能，可能导致性能下降。</li><li><strong>全文搜索和分词：</strong> Elasticsearch在文本搜索和分词方面表现出色，可以对文本字段进行全文搜索和分词处理。然而，对于复杂的文本查询，特别是涉及模糊搜索、通配符查询和近似匹配等操作，使用SQL查询可能无法充分发挥Elasticsearch的全文搜索功能，从而影响性能。</li></ol></div>`,56),c=[e];function u(l,r){return n(),a("div",null,c)}const d=s(o,[["render",u],["__file","6.Elasticsearch高级查询.html.vue"]]);export{d as default};
