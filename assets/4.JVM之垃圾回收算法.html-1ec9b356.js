import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as i,f as o,a,e as t,b as n}from"./app-ef0b4d9d.js";const d="/assets/100-910a0454.jpeg",s="/assets/image-a66aca4d-a65fcd79.png",l="/assets/image-a22c870c-50eab38c.png",c={},h=a("hr",null,null,-1),p=a("p",null,[a("img",{src:d,alt:"",loading:"lazy"})],-1),_=a("h2",{id:"意义",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#意义","aria-hidden":"true"},"#"),t(" 意义")],-1),u=a("p",null,"Java语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解。由于有个垃圾回收机制，Java中的对象不再有“作用域”的概念，只有对象的引用才有“作用域”。垃圾回收可以有效的防止内存泄露，有效的使用空闲的内存",-1),m=n('<h2 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法" aria-hidden="true">#</a> 垃圾回收算法</h2><h3 id="标记清除算法" tabindex="-1"><a class="header-anchor" href="#标记清除算法" aria-hidden="true">#</a> 标记清除算法</h3><p>首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。见图解。<br><img src="'+s+'" alt="image.png" loading="lazy"><br> 黑色块为需要回收的对象。</p><p>缺点：</p><ul><li>一个是效率问题，标记和清除两个过程的效率都不高；</li><li>另一个是空间问题，如图所示，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ul><h3 id="复制算法" tabindex="-1"><a class="header-anchor" href="#复制算法" aria-hidden="true">#</a> 复制算法</h3><p><img src="'+l+'" alt="image.png" loading="lazy"></p><p>为甚么出现复制算法？</p><ul><li><p>为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按量划分为大小相等的两块，每次只使用其中的一块</p></li><li><p>当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</p></li><li><p>新生代中的对象 98%是“朝生夕死”的，所以并不需要按照 1:1 的比例来划分内存空间，而是将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。 Survivor from 和Survivor to ，内存比例 8：1：1</p></li><li><p>当回收时，将 Eden 和 Survivor 中还存活着的对象一次性地复制到另外一块 Survivor 空间上，最后清理掉 Eden 和刚才用过的 Survivor 空间。HotSpot 虚拟机默认 Eden 和 Survivor 的大小比例是 8:1, 也就是每次新生代中可用内存空间为整个新生代容量的 90% (80%+10%），只有 10% 的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于 10%的对象存活，当 Survivor 空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保（Handle Promotion）。</p></li></ul><h3 id="标记整理算法" tabindex="-1"><a class="header-anchor" href="#标记整理算法" aria-hidden="true">#</a> 标记整理算法</h3><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><h3 id="分代收集算法" tabindex="-1"><a class="header-anchor" href="#分代收集算法" aria-hidden="true">#</a> 分代收集算法</h3><p>一般把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或者“标记一整理”算法来进行回收。</p>',13);function v(f,g){return r(),i("div",null,[h,p,_,u,o("more"),m])}const x=e(c,[["render",v],["__file","4.JVM之垃圾回收算法.html.vue"]]);export{x as default};
