import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as n,f as i,a as e,e as d,b as s}from"./app-ef0b4d9d.js";const r="/assets/100-1663224941007-196-4b8e2523.jpeg",c="/assets/javastringpool-46a7d1db-368c7d89.jpeg",o={},l=e("hr",null,null,-1),h=e("p",null,[e("img",{src:r,alt:"",loading:"lazy"})],-1),u=e("h3",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),d(" 概述")],-1),_=e("p",null,"在Java中，String是不可变的，由final进行修饰，但是String为什么是不可变的呢？主要是从内存、同步和数据结构的角度进行阐述。",-1),g=s(`<h3 id="原因" tabindex="-1"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h3><h4 id="_1-字符串池的需要" tabindex="-1"><a class="header-anchor" href="#_1-字符串池的需要" aria-hidden="true">#</a> 1.字符串池的需要</h4><p>字符串池是方法区一个重要的数据区域，下面这个代码只会在字符串池创建一个&#39;abcd&#39;对象。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String string1 = &quot;abcd&quot;;
String string2 = &quot;abcd&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>具体引用如下图：<br><img src="`+c+`" alt="javastringpool.jpeg" loading="lazy"><br> 如果string是可变的，那么一个引用更改字符串值就会导致另一个引用的值错误。</p><h4 id="_2-缓存-hashcode" tabindex="-1"><a class="header-anchor" href="#_2-缓存-hashcode" aria-hidden="true">#</a> 2.缓存 Hashcode</h4><p>在 Java 中经常使用字符串的 hashcode。 例如，在 HashMap 或 HashSet 中。 作为不可变代码可以保证散列代码总是相同的，这样就不担心更改的情况下改变它。 这意味着，不需要每次使用 hashcode 时都计算它。 这样更有效率。</p><h4 id="_3-促进其他对象的使用" tabindex="-1"><a class="header-anchor" href="#_3-促进其他对象的使用" aria-hidden="true">#</a> 3.促进其他对象的使用</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HashSet&lt;String&gt; set = new HashSet&lt;String&gt;();
set.add(new String(&quot;a&quot;));
set.add(new String(&quot;b&quot;));
set.add(new String(&quot;c&quot;));
 
for(String a: set)
	a.value = &quot;a&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，如果 String 是可变的，那么它的值可以被修改，这将违反 set 的设计(set 包含不重复的元素)。</p><h4 id="_4-安全" tabindex="-1"><a class="header-anchor" href="#_4-安全" aria-hidden="true">#</a> 4.安全</h4><p>字符串被广泛用作许多 java 类的参数，例如网络连接、打开文件等。 如果 String 不是不可变的，则连接或文件将被更改，这可能会导致严重的安全威胁。 该方法认为它是连接到一台机器，但没有。 可变字符串也可能在反射中导致安全问题，因为参数是字符串。</p><h4 id="_5-线程安全" tabindex="-1"><a class="header-anchor" href="#_5-线程安全" aria-hidden="true">#</a> 5.线程安全</h4><p>String是不可变的，所以它是线程安全的。</p>`,14);function v(p,m){return t(),n("div",null,[l,h,u,_,i("more"),g])}const S=a(o,[["render",v],["__file","1.为什么String是不可变的.html.vue"]]);export{S as default};
