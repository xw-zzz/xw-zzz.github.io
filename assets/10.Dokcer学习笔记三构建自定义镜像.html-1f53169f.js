import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as d,f as l,a as e,e as c,b as t}from"./app-ef0b4d9d.js";const n={},r=e("hr",null,null,-1),s=e("h2",{id:"镜像定义",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#镜像定义","aria-hidden":"true"},"#"),c(" 镜像定义")],-1),o=t(`<p>Docker 镜像是由文件系统叠加而成，最底端是一个文件引导系统，即 bootfs。除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。例图如下。</p><p><img src="https://img.hacpai.com/file/2020/01/image-94620985.png" alt="" loading="lazy"></p><h2 id="_2-构建镜像" tabindex="-1"><a class="header-anchor" href="#_2-构建镜像" aria-hidden="true">#</a> 2.构建镜像</h2><p>构建镜像主要有两种方法：</p><ul><li>使用 docker commit 命令</li><li>使用 docker build 和 Dockerfile 命令</li></ul><p>推荐使用 Dockerfile 构建镜像，因为 Dockerfile 更加灵活、强大。</p><h3 id="_1-使用-docker-的-commit-命令创建镜像" tabindex="-1"><a class="header-anchor" href="#_1-使用-docker-的-commit-命令创建镜像" aria-hidden="true">#</a> 1.使用 Docker 的 commit 命令创建镜像</h3><p>Docker 的 comiit 命令有点类似于 SVN、Git,先创建一个 容器，然后对容器进行修改，然后提交成为一个新镜像。</p><p>首先，基于 Ubuntu 容器创建一个新镜像。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it centos:7 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.hacpai.com/file/2020/01/image-12d8fa48.png" alt="" loading="lazy"></p><p>在/home 路径下创建 xw 文件夹：mkdir /home/xw</p><p><img src="https://img.hacpai.com/file/2020/01/image-aa0ed6c6.png" alt="" loading="lazy"></p><p>安装 ifconfig 命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum -y install net-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>提交</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker commit -a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.hacpai.com/file/2020/01/image-1e80af08.png" alt="" loading="lazy"></p><p>使用 docker images 命令可以看到我们新构建的镜像。</p><p><img src="https://img.hacpai.com/file/2020/01/image-00419355.png" alt="" loading="lazy"></p><p>启动新构建的镜像，看下我们创建的目录是否存在。</p><p><img src="https://img.hacpai.com/file/2020/01/image-09041e63.png" alt="" loading="lazy"></p><p>镜像文件存在，说明构建的镜像是 OK 的。</p><h3 id="_3-使用-dockerfile-构建镜像" tabindex="-1"><a class="header-anchor" href="#_3-使用-dockerfile-构建镜像" aria-hidden="true">#</a> 3.使用 Dockerfile 构建镜像</h3><p>Dockerfile 使用 DSL 语法编写构建镜像的命令，使用 docker build 命令构建镜像。</p><p>首先，先了解一下相关命令。</p><ul><li>MAINTAINER 注明作者</li><li>COPY 复制文件进入镜像（只能用相对路径，不能用绝对路径）</li><li>ENV 设置环境变量</li><li>EXPOSE 暴露容器端口</li><li>RUN 在构建镜像的时候执行，作用于镜像层面</li><li>CMD 在容器启动的时候执行，作用于容器层，dockerfile 里有多条时只允许执行最后一条。(需要运行的命令在数组里面，如果不使用数组指定 CMD 命令，这时 Docker 会在命令前面加上/bin/sh -c,可能会导致不可预计的错误，所以 Docker 推荐一般使用数组形式执行命令)</li><li>ENTRYPOINT 在容器启动的时候执行，作用于容器层，dockerfile 里有多条时只允许执行最后一条</li><li>ADD 复制文件进入镜像（假如文件是.tar.gz 文件会解压）</li><li>WORKDIR 指定工作目录，假如路径不存在会创建路径</li></ul><p>我们创建一个最简单的 Dockerfile,内容如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>from centos:7
run cd /home
run mkdir xw
run echo &quot;mkdir xw dir&quot;
run ls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 docker -build 命令构建。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build -t  mycentos7:1 .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-t 指定 tag,如果我们没有指定 tag,默认使用 latest 标签。打包完成后使用 docker images 命令查看我们构建的镜像。</p><p><img src="https://img.hacpai.com/file/2020/01/image-c08714ed.png" alt="" loading="lazy"></p><p>由于 Dockerfile 每一个步骤的执行结果都会提交成镜像，它会将之前构建的镜像作为缓存，大大加快构建的速度，如果不需要缓存，可以添加 --no-cache 命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build --no-cache -t mycentos:2 .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-镜像推送到-docker-hub" tabindex="-1"><a class="header-anchor" href="#_3-镜像推送到-docker-hub" aria-hidden="true">#</a> 3.镜像推送到 Docker Hub</h2><p>首先注册一个 docker Hub 账号。使用 docker login 命令，登录</p><p><img src="https://img.hacpai.com/file/2020/01/image-95b927a5.png" alt="" loading="lazy"></p><p>开始推送</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker push mycentos7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.hacpai.com/file/2020/01/image-6f96c40b.png" alt="" loading="lazy"></p><p>镜像名称不符合规范，重命名</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker tag cea9577866a5 docker.io/2457081614/mycentos7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重新推送。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker push docker.io/2457081614/mycentos7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://img.hacpai.com/file/2020/01/image-47fd087d.png" alt="" loading="lazy"><img src="https://img.hacpai.com/file/2020/01/image-b91d53df.png" alt="" loading="lazy"></p><p>推送成功。</p><p>加油，共勉。</p>`,48);function p(m,g){return a(),d("div",null,[r,s,l("more"),o])}const v=i(n,[["render",p],["__file","10.Dokcer学习笔记三构建自定义镜像.html.vue"]]);export{v as default};
