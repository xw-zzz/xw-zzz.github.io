import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,e as s,d as t,b as e}from"./app-ef0b4d9d.js";const i="/assets/hystrix-command-flow-chart-ea99ae54.png",u="/assets/circuit-breaker-1280-e3232a97.png",k="/assets/image-20221202170143423-a8117b66.png",r="/assets/a0ea02431588d8f176d8f5ceb1be1909-7211ff61.png",d={},m=e('<h2 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h2><p>下图展示了Hystrix的执行过程图：</p><p><img src="'+i+`" alt="img" loading="lazy"></p><p>流程：</p><ol><li><p>构造一个<code>HystrixCommand</code>或<code>HystrixObservableCommand</code>对象，<code>HystrixCommand</code>用户返回单个请求，<code>HystrixObservableCommand</code>用户返回一个可观察的对象。</p></li><li><p>执行命令</p></li><li><p>如果该命令启用了请求缓存，并且请求的响应在缓存中可用，那么这个缓存的响应将立即以Observable的形式返回</p></li><li><p>当执行这个命令时，<code>Hystrix</code>会检查断路器，看开关是否打开。如果电路被打开，<code>Hystrix</code>将不会执行，而是将流路由到回滚函数。如果开关被关闭，那么继续线程池和信号量是否满足要求。</p></li><li><p>判断执行是否超时，如果超时路由到回滚函数。</p></li><li><p><code>Hystrix</code>向断路器报告成功、失败、拒绝和超时，断路器维护一组计算统计数据的滚动计数器。它使用这些统计数据来确定何时开关，这时它将短路任何后续请求，直到恢复周期结束，在恢复周期结束后，它将在首先检查某些健康检查后再次关闭。</p><h3 id="源码流程" tabindex="-1"><a class="header-anchor" href="#源码流程" aria-hidden="true">#</a> 源码流程</h3><p>Hystrix 基于AOP 和 rxjava(响应式编程)实现，切面类为<code>HystrixCommandAspect</code>，会对加了 <code>@HystrixCommand</code> 和 <code>@HystrixCollapser</code> 进行拦截，入口代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">methodsAnnotatedWithHystrixCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token function">getMethodFromTarget</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Validate</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">&quot;failed to get method from joinPoint: %s&quot;</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">HystrixCommand</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">HystrixCollapser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;method cannot be annotated with HystrixCommand and HystrixCollapser &quot;</span> <span class="token operator">+</span>
                    <span class="token string">&quot;annotations at the same time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">MetaHolderFactory</span> metaHolderFactory <span class="token operator">=</span> <span class="token constant">META_HOLDER_FACTORY_MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">HystrixPointcutType</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MetaHolder</span> metaHolder <span class="token operator">=</span> metaHolderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HystrixInvokable</span> invokable <span class="token operator">=</span> <span class="token class-name">HystrixCommandFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutionType</span> executionType <span class="token operator">=</span> metaHolder<span class="token punctuation">.</span><span class="token function">isCollapserAnnotationPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                metaHolder<span class="token punctuation">.</span><span class="token function">getCollapserExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> metaHolder<span class="token punctuation">.</span><span class="token function">getExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>metaHolder<span class="token punctuation">.</span><span class="token function">isObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token class-name">CommandExecutor</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">,</span> metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> <span class="token function">executeObservable</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">,</span> metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HystrixBadRequestException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HystrixRuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token function">hystrixRuntimeExceptionToThrowable</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入到上面流程图所示的核心逻辑，进入AbstractCommand类，代码片段如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>                 <span class="token comment">/* this is a stateful object so can only be used once */</span>
                <span class="token comment">// 检查当前命令状态,如果当前状态不是未开始，说明已经执行，抛出异常</span>
                <span class="token comment">// 一共有 NOT_STARTED(未开始), OBSERVABLE_CHAIN_CREATED(执行链已经创建), USER_CODE_EXECUTED(用户代码已执行), UNSUBSCRIBED(未被订阅),</span>
                <span class="token comment">// TERMINAL(结束) 5种状态</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commandState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">CommandState</span><span class="token punctuation">.</span><span class="token constant">NOT_STARTED</span><span class="token punctuation">,</span> <span class="token class-name">CommandState</span><span class="token punctuation">.</span><span class="token constant">OBSERVABLE_CHAIN_CREATED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">IllegalStateException</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;This instance can only be executed once. Please instantiate a new instance.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//TODO make a new error type for this</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HystrixRuntimeException</span><span class="token punctuation">(</span><span class="token class-name">FailureType</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST_EXCEPTION</span><span class="token punctuation">,</span> _cmd<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getLogMessagePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; command executed multiple times - this is not permitted.&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                commandStartTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">requestLogEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// log this command execution regardless of what happened</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRequestLog <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        currentRequestLog<span class="token punctuation">.</span><span class="token function">addExecutedCommand</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">final</span> <span class="token keyword">boolean</span> requestCacheEnabled <span class="token operator">=</span> <span class="token function">isRequestCachingEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">final</span> <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 从缓存中获取数据并返回</span>
                <span class="token comment">/* try from cache first */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">HystrixCommandResponseFromCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> fromCache <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HystrixCommandResponseFromCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> requestCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fromCache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        isResponseFromCache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> <span class="token function">handleRequestCacheHitAndEmitValues</span><span class="token punctuation">(</span>fromCache<span class="token punctuation">,</span> _cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> hystrixObservable <span class="token operator">=</span>
                        <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span>applyHystrixSemantics<span class="token punctuation">)</span>
                                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>wrapWithAllOnNextHooks<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> afterCache<span class="token punctuation">;</span>

                <span class="token comment">// put in cache</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCacheEnabled <span class="token operator">&amp;&amp;</span> cacheKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// wrap it for caching</span>
                    <span class="token class-name">HystrixCachedObservable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> toCache <span class="token operator">=</span> <span class="token class-name">HystrixCachedObservable</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>hystrixObservable<span class="token punctuation">,</span> _cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">HystrixCommandResponseFromCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> fromCache <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HystrixCommandResponseFromCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> requestCache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> toCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fromCache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// another thread beat us so we&#39;ll use the cached value instead</span>
                        toCache<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        isResponseFromCache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">return</span> <span class="token function">handleRequestCacheHitAndEmitValues</span><span class="token punctuation">(</span>fromCache<span class="token punctuation">,</span> _cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">// we just created an ObservableCommand so we cast and return it</span>
                        afterCache <span class="token operator">=</span> toCache<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    afterCache <span class="token operator">=</span> hystrixObservable<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> afterCache
                        <span class="token punctuation">.</span><span class="token function">doOnTerminate</span><span class="token punctuation">(</span>terminateCommandCleanup<span class="token punctuation">)</span>     <span class="token comment">// perform cleanup once (either on normal terminal state (this line), or unsubscribe (next line))</span>
                        <span class="token punctuation">.</span><span class="token function">doOnUnsubscribe</span><span class="token punctuation">(</span>unsubscribeCommandCleanup<span class="token punctuation">)</span> <span class="token comment">// perform cleanup once</span>
                        <span class="token punctuation">.</span><span class="token function">doOnCompleted</span><span class="token punctuation">(</span>fireOnCompletedHook<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不走缓存，将会调用下面方法，逻辑如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">applyHystrixSemantics</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AbstractCommand</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// mark that we&#39;re starting execution on the ExecutionHook</span>
        <span class="token comment">// if this hook throws an exception, then a fast-fail occurs with no fallback.  No state is left inconsistent</span>
        executionHook<span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* determine if we&#39;re allowed to execute */</span>
        <span class="token comment">// 判断开关是否打开</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">.</span><span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">TryableSemaphore</span> executionSemaphore <span class="token operator">=</span> <span class="token function">getExecutionSemaphore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">AtomicBoolean</span> semaphoreHasBeenReleased <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">Action0</span> singleSemaphoreRelease <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>semaphoreHasBeenReleased<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        executionSemaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">final</span> <span class="token class-name">Action1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> markExceptionThrown <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span><span class="token class-name">HystrixEventType</span><span class="token punctuation">.</span><span class="token constant">EXCEPTION_THROWN</span><span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>executionSemaphore<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">/* used to track userThreadExecutionTime */</span>
                    executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setInvocationStartTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token function">executeCommandAndObserve</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>markExceptionThrown<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">doOnTerminate</span><span class="token punctuation">(</span>singleSemaphoreRelease<span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">doOnUnsubscribe</span><span class="token punctuation">(</span>singleSemaphoreRelease<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">handleSemaphoreRejectionViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">handleShortCircuitViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取一个信号量实例。如果当前隔离模式是一个信号量，则根据<code>commandKey</code>获取信号量，如果信号量不存在，则初始化并缓存它;如果当前隔离模式是线程池，则使用默认信号量<code>TryableSemaphoreNoOp</code>。默认情况下，所有请求都可以被传递。如果是线程池模式运行，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">executeCommandWithSpecifiedIsolation</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AbstractCommand</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 线程池隔离模式</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">executionIsolationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ExecutionIsolationStrategy</span><span class="token punctuation">.</span><span class="token constant">THREAD</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// mark that we are executing in a thread (even if we end up being rejected we still were a THREAD execution and not SEMAPHORE)</span>
            <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Func0</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observable</span><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutionOccurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commandState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">CommandState</span><span class="token punctuation">.</span><span class="token constant">OBSERVABLE_CHAIN_CREATED</span><span class="token punctuation">,</span> <span class="token class-name">CommandState</span><span class="token punctuation">.</span><span class="token constant">USER_CODE_EXECUTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;execution attempted while in state : &quot;</span> <span class="token operator">+</span> commandState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 统计信息</span>
                    metrics<span class="token punctuation">.</span><span class="token function">markCommandStart</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">,</span> threadPoolKey<span class="token punctuation">,</span> <span class="token class-name">ExecutionIsolationStrategy</span><span class="token punctuation">.</span><span class="token constant">THREAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 判断是否超时 </span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCommandTimedOut<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">TimedOutStatus</span><span class="token punctuation">.</span><span class="token constant">TIMED_OUT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// the command timed out in the wrapping thread so we will return immediately</span>
                        <span class="token comment">// and not increment any of the counters below or other such logic</span>
                        <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;timed out before executing run()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 更新线程状态为已开始</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadState<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token class-name">ThreadState</span><span class="token punctuation">.</span><span class="token constant">NOT_USING_THREAD</span><span class="token punctuation">,</span> <span class="token class-name">ThreadState</span><span class="token punctuation">.</span><span class="token constant">STARTED</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">//we have not been unsubscribed, so should proceed</span>
                        <span class="token class-name">HystrixCounters</span><span class="token punctuation">.</span><span class="token function">incrementGlobalConcurrentThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        threadPool<span class="token punctuation">.</span><span class="token function">markThreadExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// store the command that is being run</span>
                        endCurrentThreadExecutingCommand <span class="token operator">=</span> <span class="token class-name">Hystrix</span><span class="token punctuation">.</span><span class="token function">startCurrentThreadExecutingCommand</span><span class="token punctuation">(</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setExecutedInThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token doc-comment comment">/**
                         * If any of these hooks throw an exception, then it appears as if the actual execution threw an error
                         */</span>
                       <span class="token comment">//执行hook，若异常，则直接抛出异常</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            executionHook<span class="token punctuation">.</span><span class="token function">onThreadStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            executionHook<span class="token punctuation">.</span><span class="token function">onRunStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            executionHook<span class="token punctuation">.</span><span class="token function">onExecutionStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">return</span> <span class="token function">getUserExecutionObservable</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">//command has already been unsubscribed, so return immediately</span>
                        <span class="token keyword">return</span> <span class="token class-name">Observable</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;unsubscribed before executing run()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="断路器" tabindex="-1"><a class="header-anchor" href="#断路器" aria-hidden="true">#</a> 断路器</h2>`,6),v={href:"http://netflix.github.io/Hystrix/javadoc/index.html?com/netflix/hystrix/HystrixCircuitBreaker.html",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"HystrixCircuitBreaker",-1),h=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HystrixCircuitBreaker</span> <span class="token punctuation">{</span>

    <span class="token comment">// 是否允许执行</span>
    <span class="token keyword">boolean</span> <span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 断路器是否处在打开状态</span>
    <span class="token keyword">boolean</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在半打开状态，表示测试请求调用成功</span>
    <span class="token keyword">void</span> <span class="token function">markSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在半打开状态，表示测试请求调用失败</span>
    <span class="token keyword">void</span> <span class="token function">markNonSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在 Command 开始执行时调用</span>
    <span class="token keyword">boolean</span> <span class="token function">attemptExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> <img src="`+u+`" alt="img" loading="lazy"></h1><p>断路器有打开(断路器打开，一定时间内请求不可通过)、关闭(请求正常通过)、半开(打开一段时间后，放行了一个请求到下游，待结果返回)三种状态， 当请求流量大于<code>HystrixCommandProperties.circuitBreakerRequestVolumeThreshold()</code>所设定的值或失败率大于<code>HystrixCommandProperties.circuitBreakerErrorThresholdPercentage()</code>设定的值时断路器打开，那么，断路器如何在不同的状态间进行调整呢？后面介绍线程池的时候，会提到过基于滑动窗口和桶的监控信息统计类 <code>HystrixThreadPoolMetrics</code>，其实 Command 也有相似的统计类 <code>HystrixCommandMetrics</code>，它们都是 <code>HystrixMetrics</code> 的实现类，机制非常相似。断路器会订阅 <code>HystrixCommandMetrics</code>，在滑动窗口发生滚动的时候根据最新窗口内的请求量和成功率判断是否要将断路器的状态从关闭改为打开。</p><p>断路器从关毕到打开判断代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitOpen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// if we&#39;re open we immediately return true and don&#39;t bother attempting to &#39;close&#39; ourself as that is left to allowSingleTest and a subsequent successful test to close</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// we&#39;re closed, so let&#39;s see if errors have made us so we should trip the circuit open</span>
            <span class="token class-name">HealthCounts</span> health <span class="token operator">=</span> metrics<span class="token punctuation">.</span><span class="token function">getHealthCounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// check if we are past the statisticalWindowVolumeThreshold</span>
            <span class="token comment">//     // 是否到达判断是否断路的最低请求量，否则跳过，因为请求量少的时候通过成功百分比来判断不准确</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>health<span class="token punctuation">.</span><span class="token function">getTotalRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> properties<span class="token punctuation">.</span><span class="token function">circuitBreakerRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// we are not past the minimum volume threshold for the statisticalWindow so we&#39;ll return false immediately and not calculate anything</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 错误率没有达到阈值，不需要处理</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>health<span class="token punctuation">.</span><span class="token function">getErrorPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> properties<span class="token punctuation">.</span><span class="token function">circuitBreakerErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 失败率太高,打开</span>
                <span class="token comment">// our failure rate is too high, trip the circuit</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitOpen<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// if the previousValue was false then we want to set the currentTime</span>
                    circuitOpenedOrLastTestedTime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// How could previousValue be true? If another thread was going through this code at the same time a race-condition could have</span>
                    <span class="token comment">// caused another thread to set it to true already even though we were in the process of doing the same</span>
                    <span class="token comment">// In this case, we know the circuit is open, so let the other thread set the currentTime and report back that the circuit is open</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>半开状态判断逻辑的关键代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">allowSingleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> timeCircuitOpenedOrWasLastTested <span class="token operator">=</span> circuitOpenedOrLastTestedTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 断路开关打开 &amp; 休眠时间超过sleepWindow 允许请求通过</span>
            <span class="token comment">// 1) if the circuit is open</span>
            <span class="token comment">// 2) and it&#39;s been longer than &#39;sleepWindow&#39; since we opened the circuit</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitOpen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> timeCircuitOpenedOrWasLastTested <span class="token operator">+</span> properties<span class="token punctuation">.</span><span class="token function">circuitBreakerSleepWindowInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// We push the &#39;circuitOpenedTime&#39; ahead by &#39;sleepWindow&#39; since we have allowed one request to try.</span>
                <span class="token comment">// If it succeeds the circuit will be closed, otherwise another singleTest will be allowed at the end of the &#39;sleepWindow&#39;.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitOpenedOrLastTestedTime<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>timeCircuitOpenedOrWasLastTested<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// if this returns true that means we set the time so we&#39;ll return true to allow the singleTest</span>
                    <span class="token comment">// if it returned false it means another thread raced us and allowed the singleTest before we did</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="隔离级别" tabindex="-1"><a class="header-anchor" href="#隔离级别" aria-hidden="true">#</a> 隔离级别</h2><p>Hystrix 为不同的应用场景提供两种隔离级别：<code>Thread</code> 和 <code>Semaphore</code>。</p><h3 id="线程隔离" tabindex="-1"><a class="header-anchor" href="#线程隔离" aria-hidden="true">#</a> 线程隔离</h3><p>线程隔离就是将调用放在另外的线程执行，</p><p><img src="`+k+'" alt="image-20221202170143423" loading="lazy"></p><ul><li>对委托线程来说，能够随时在出现超时调用时 walk away，执行 fallback 的逻辑，不会阻塞到连接超时从而拖累服务的响应时间。</li><li>对隔离效果来说，当下游服务出现超时故障时，仅仅该线程池会爆满，对使用其它线程池的不相关服务以及服务本身没有任何影响。当下游恢复健康后，线程池会再次变得可用，恢复往常状态。</li><li>对监控来说，由于线程池有多种监控数据，例如占用线程数、排队请求数、执行任务数等，当我们错误地配置了客户端或是下游服务出现性能变化我们都能够第一时间感知到并做出应对。</li></ul><p>大多数场景下，默认的 10 个线程就能足够了。如果想要进一步调整的话，官方给出了一条简单有效的公式:</p><blockquote><p><strong>requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room</strong></p><p>峰值 qps * P99 响应时间 + 适当数量的额外缓冲线程</p></blockquote><p>线程隔离也有缺点。业务线程将具体调用提交到线程池到执行完成，就需要付出任务排队、线程池调度、上下文切换的开销。Netflix 也考虑到这一点，并做了对应的测试。对于一个每秒被请求 60 次的接口，使用线程隔离在 P50、P90、P99 的开销分别为 0ms、3ms 和 9ms。</p><p><img src="'+r+'" alt="img" loading="lazy"></p><h3 id="信号量隔离" tabindex="-1"><a class="header-anchor" href="#信号量隔离" aria-hidden="true">#</a> 信号量隔离</h3><p>但是，如果你的接口响应时间非常小，无法接受线程隔离带来的开销，且信任该接口能够很快返回的话，则可以使用 <code>Semaphore</code> 隔离级别。原因是使用信号量隔离自然就无法像线程隔离一样在出现超时的时候直接返回，而是需要等待客户端的阻塞结束。<br> 在 Hystrix 中，command 的执行以及 Fallback 都支持使用 <code>Semaphore</code>。将 <code>execution.isolation.strategy</code> 配置为 <code>SEMAPHORE</code> 即可将默认的 <code>THREAD</code> 隔离级别改为信号量隔离。根据接口的响应时间以及单位时间内的调用次数，你可以根据和计算线程数相似的方式计算出可允许并发执行的数量。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文从整体执行流程、断路器、隔离机制方面对进行了说明，还有一些其他方面如指标采集不再过多阐述。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',22),f={href:"https://github.com/Netflix/Hystrix/wiki/How-it-Works",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/ReactiveX/RxJava",target:"_blank",rel:"noopener noreferrer"};function w(g,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[m,n("p",null,[s("断路器核心类为： "),n("a",v,[b,t(a)]),s("，对应类方法及执行流程如下：")]),h,n("ul",null,[n("li",null,[n("a",f,[s("https://github.com/Netflix/Hystrix/wiki/How-it-Works"),t(a)])]),n("li",null,[n("a",y,[s("https://github.com/ReactiveX/RxJava"),t(a)])])])])}const E=p(d,[["render",w],["__file","01.Hystrix执行流程分析.html.vue"]]);export{E as default};
