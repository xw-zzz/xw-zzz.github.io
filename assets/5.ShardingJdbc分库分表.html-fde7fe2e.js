import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as l,a as n,e as s,d as e,b as i}from"./app-ef0b4d9d.js";const c="/assets/20220715155025-352f789e.png",r="/assets/20220715145722-63377c3d.png",u="/assets/20220715161950-6c3b3cb8.png",d={},k=n("h1",{id:"常见分库分表中间件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常见分库分表中间件","aria-hidden":"true"},"#"),s(" 常见分库分表中间件")],-1),m=n("p",null,"业界常见分库分表中间件",-1),v=n("li",null,"Cobar（已经被淘汰没使用了）",-1),g=n("li",null,[s("TDDL "),n("ul",null,[n("li",null,"淘宝根据自己的业务特点开发了 TDDL （Taobao Distributed Data Layer）"),n("li",null,"基于JDBC规范，没有server，以client-jar的形式存在，引入项目即可使用"),n("li",null,"开源功能比较少，阿里内部使用为主")])],-1),h={href:"http://www.mycat.org.cn/",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,"Java语言编写的MySQL数据库网络协议的开源中间件，前身 Cobar",-1),y=n("li",null,"遵守Mysql原生协议，跨语言，跨平台，跨数据库的通用中间件代理",-1),S=n("li",null,"是基于 Proxy，它复写了 MySQL 协议，将 Mycat Server 伪装成一个 MySQL 数据库",-1),_=n("li",null,"和ShardingShere下的Sharding-Proxy作用类似，需要单独部署",-1),w=n("p",null,"ShardingSphere 下的Sharding-JDBC",-1),L={href:"https://shardingsphere.apache.org/",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,[n("p",null,"Apache ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈它由 Sharding-JDBC、Sharding-Proxy 和 Sharding-Sidecar 3个独立产品组合")],-1),N=n("li",null,[n("p",null,"Sharding-JDBC"),n("ul",null,[n("li",null,"基于jdbc驱动，不用额外的proxy，支持任意实现 JDBC 规范的数据库"),n("li",null,"它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖"),n("li",null,"可理解为加强版的 JDBC 驱动，兼容 JDBC 和各类 ORM 框架")])],-1),E=i('<p>ShardingSphere-JDBC将自己定义为一个轻量级Java框架，它在Java JDBC层提供额外的服务。由于客户端直接连接到数据库，它以jar的形式提供服务，不需要额外的部署和依赖。它可以被认为是一个增强的JDBC驱动程序，它完全兼容JDBC和各种ORM框架。架构图如下所示：</p><p><img src="'+c+'" alt="" loading="lazy"></p><p><strong>Mycat和ShardingJdbc区别：</strong></p><ul><li>两者设计理念相同，主流程都是SQL解析--&gt;SQL路由--&gt;SQL改写--&gt;结果归并</li><li>sharding-jdbc <ul><li>基于jdbc驱动，不用额外的proxy，在本地应用层重写Jdbc原生的方法，实现数据库分片形式</li><li>是基于 JDBC 接口的扩展，是以 jar 包的形式提供轻量级服务的，性能高</li><li>代码有侵入性</li></ul></li><li>Mycat <ul><li>是基于 Proxy，它复写了 MySQL 协议，将 Mycat Server 伪装成一个 MySQL 数据库</li><li>客户端所有的jdbc请求都必须要先交给MyCat，再有MyCat转发到具体的真实服务器</li><li>缺点是效率偏低，中间包装了一层</li><li>代码无侵入性</li></ul></li></ul><h1 id="分库分表常见策略" tabindex="-1"><a class="header-anchor" href="#分库分表常见策略" aria-hidden="true">#</a> 分库分表常见策略</h1><h2 id="range划分" tabindex="-1"><a class="header-anchor" href="#range划分" aria-hidden="true">#</a> range划分</h2><p>方案1：根据自增ID范围去划分，案例如下：</p><ul><li>1~1000000是table_1</li><li>1000000~2000000为table_2</li><li>。。。。</li></ul><p>优点：</p><ul><li>id是自增长，可以无限增长</li><li>扩容不用迁移数据，容易维护</li></ul><p>缺点：</p><ul><li>数据倾斜严重，热点数据过于集中，部分节点有瓶颈</li></ul><h2 id="hash取模" tabindex="-1"><a class="header-anchor" href="#hash取模" aria-hidden="true">#</a> Hash取模</h2><p><img src="'+r+`" alt="" loading="lazy"></p><ul><li>优点 <ul><li>保证数据较均匀的分散落在不同的库、表中，可以有效的避免热点数据集中问题，</li></ul></li><li>缺点 <ul><li>扩容不是很方便，需要数据迁移</li></ul></li></ul><h1 id="分库分表的优点及缺点" tabindex="-1"><a class="header-anchor" href="#分库分表的优点及缺点" aria-hidden="true">#</a> 分库分表的优点及缺点</h1><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><ul><li>解决数据库瓶颈（连接数限制，默认连接数为100，最大16384、单表海量数据查询性能问题、单台数据库并发访问压力）</li><li>解决系统瓶颈（磁盘读写IO瓶颈、网络IO瓶颈、CPU瓶颈）</li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><ul><li>跨节点数据库Join关联查询和多维度查询复杂</li><li>不同维度查看数据，利用的partitionKey是不一样的</li><li>分布式事务问题</li><li>执行的SQL排序、翻页、函数计算问题</li><li>数据库全局主键重复问题</li><li>二次扩容问题</li><li>分库分表技术选型问题</li></ul><h1 id="shardingjdbc使用" tabindex="-1"><a class="header-anchor" href="#shardingjdbc使用" aria-hidden="true">#</a> ShardingJdbc使用</h1><h2 id="分片策略" tabindex="-1"><a class="header-anchor" href="#分片策略" aria-hidden="true">#</a> 分片策略</h2><ul><li><p>行表达式分片策略 InlineShardingStrategy</p><ul><li>只支持【<strong>单分片键</strong>】使用Groovy的表达式，提供对SQL语句中的 =和IN 的分片操作支持</li><li>可以通过简单的配置使用，无需自定义分片算法，从而避免繁琐的Java代码开发</li></ul></li><li><p>标准分片策略StandardShardingStrategy</p><ul><li>只支持【<strong>单分片键</strong>】，提供PreciseShardingAlgorithm和RangeShardingAlgorithm两个分片算法</li><li>PreciseShardingAlgorithm 精准分片 是必选的，用于处理=和IN的分片</li><li>RangeShardingAlgorithm 范围分配 是可选的，用于处理BETWEEN AND分片</li><li>如果不配置RangeShardingAlgorithm，如果SQL中用了BETWEEN AND语法，则将按照全库路由处理，性能下降</li></ul></li><li><p>复合分片策略ComplexShardingStrategy</p><ul><li>支持【<strong>多分片键</strong>】，多分片键之间的关系复杂，由开发者自己实现，提供最大的灵活度</li><li>提供对SQL语句中的=, IN和BETWEEN AND的分片操作支持</li></ul></li></ul><ul><li><p>Hint分片策略HintShardingStrategy</p><ul><li><p>这种分片策略无需配置分片健，分片健值也不再从 SQL中解析，外部手动指定分片健或分片库，让 SQL在指定的分库、分表中执行</p></li><li><p>用于处理使用Hint行分片的场景，通过Hint而非SQL解析的方式分片的策略</p></li><li><p>Hint策略会绕过SQL解析的，对于这些比较复杂的需要分片的查询，Hint分片策略性能可能会更好</p></li></ul></li><li><p>不分片策略 NoneShardingStrategy</p></li></ul><h2 id="行表达式分片策略-inlineshardingstrategy" tabindex="-1"><a class="header-anchor" href="#行表达式分片策略-inlineshardingstrategy" aria-hidden="true">#</a> 行表达式分片策略 InlineShardingStrategy</h2><p>具体代码请查看完整项目，这里只贴关键配置</p><p>新建<code>shop_order_0</code>数据库，添加表<code>product_order_0</code>和<code>product_order_1</code>，生成Sql如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>product_order_1<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>out_trade_no<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;订单唯一标识&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>state<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;NEW 未支付订单,PAY已经支付订单,CANCEL超时取消订单&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;订单生成时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>pay_amount<span class="token punctuation">\`</span></span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;订单实际支付价格&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>nickname<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;昵称&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户id&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">6</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_bin<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>product_order_0<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>out_trade_no<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;订单唯一标识&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>state<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;NEW 未支付订单,PAY已经支付订单,CANCEL超时取消订单&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;订单生成时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>pay_amount<span class="token punctuation">\`</span></span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;订单实际支付价格&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>nickname<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;昵称&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>user_id<span class="token punctuation">\`</span></span> <span class="token keyword">bigint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户id&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">6</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_bin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关配置文件如下：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># 打印执行的数据库以及语句</span>
<span class="token key attr-name">spring.shardingsphere.props.sql.show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment"># 数据源 db0</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">ds0</span>
<span class="token comment"># 第一个数据库</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://124.223.63.123:3306/shop_order_0?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.password</span><span class="token punctuation">=</span><span class="token value attr-value">xxxxxxxxxxxxxxxxxxxxxxxxxxxxx(替换成你自己的)</span>
<span class="token comment"># 指定product_order表的数据分布情况，配置数据节点,行表达式标识符使用 \${...} 或 $-&gt;{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $-&gt;{...}</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.product_order.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">ds0.product_order_$-&gt;{0..1}</span>
<span class="token comment"># 指定product_order表的分片策略，分片策略包括【分片键和分片算法】</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.product_order.table-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token value attr-value">user_id</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.product_order.table-strategy.inline.algorithm-expression</span><span class="token punctuation">=</span><span class="token value attr-value">product_order_$-&gt;{user_id % 2}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置解析：采用行表达式分片策略，根据user_id进行分片。</p><p>编写测试用例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">ShardingJdbcDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ShardingJdbcDemoApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ProductOrderMapper</span> productOrderMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSaveProductOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">ProductOrderDO</span> productOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductOrderDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productOrder<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productOrder<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">&quot;向往&quot;</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            productOrder<span class="token punctuation">.</span><span class="token function">setOutTradeNo</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productOrder<span class="token punctuation">.</span><span class="token function">setPayAmount</span><span class="token punctuation">(</span><span class="token number">100.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productOrder<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">&quot;PAY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productOrder<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            productOrderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>productOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><p><img src="`+u+`" alt="" loading="lazy"></p><p>user_id为0,2,4,6,8分配到表product_order_0，user_id为1,3,5,7,9分配到表product_order_1。</p><h2 id="hint分片策略hintshardingstrategy" tabindex="-1"><a class="header-anchor" href="#hint分片策略hintshardingstrategy" aria-hidden="true">#</a> Hint分片策略HintShardingStrategy</h2><p>新建<code>shop_order_1数据库，添加表</code>product_order_0<code>和</code>product_order_1\`，生成Sql参考上面的：</p><p>自定义分库策略：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomDBHintShardingAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">HintShardingAlgorithm</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">dataSourceNames</span>   数据源集合
     *                          在分库时值为所有分片库的集合 databaseNames
     *                          分表时为对应分片库中所有分片表的集合 tablesNames
     * <span class="token keyword">@param</span> <span class="token parameter">hintShardingValue</span> 分片属性，包括
     *                          logicTableName 为逻辑表，
     *                          columnName 分片健（字段），hit策略此处为空 &quot;&quot;
     *                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     *                          value 【之前】都是 从 SQL 中解析出的分片健的值,用于取模判断
     *                          HintShardingAlgorithm不再从SQL 解析中获取值，而是直接通过
     *                          hintManager.addTableShardingValue(&quot;product_order&quot;, 1)参数进行指定
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSharding</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataSourceNames<span class="token punctuation">,</span> <span class="token class-name">HintShardingValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> hintShardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tableName <span class="token operator">:</span> dataSourceNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> shardingValue <span class="token operator">:</span> hintShardingValue<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tableName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>shardingValue <span class="token operator">%</span> dataSourceNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义分表策略:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomTableHintShardingAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">HintShardingAlgorithm</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">dataSourceNames</span>   数据源集合
     *                          在分库时值为所有分片库的集合 databaseNames
     *                          分表时为对应分片库中所有分片表的集合 tablesNames
     * <span class="token keyword">@param</span> <span class="token parameter">hintShardingValue</span> 分片属性，包括
     *                          logicTableName 为逻辑表，
     *                          columnName 分片健（字段），hit策略此处为空 &quot;&quot;
     *                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     *                          value 【之前】都是 从 SQL 中解析出的分片健的值,用于取模判断
     *                          HintShardingAlgorithm不再从SQL 解析中获取值，而是直接通过
     *                          hintManager.addTableShardingValue(&quot;product_order&quot;, 1)参数进行指定
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSharding</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataSourceNames<span class="token punctuation">,</span> <span class="token class-name">HintShardingValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> hintShardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tableName <span class="token operator">:</span> dataSourceNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> shardingValue <span class="token operator">:</span> hintShardingValue<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tableName<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>shardingValue <span class="token operator">%</span> dataSourceNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件：</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">sharding-Jdbc-demo</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080</span>

<span class="token comment"># 打印执行的数据库以及语句</span>
<span class="token key attr-name">spring.shardingsphere.props.sql.show</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>

<span class="token comment"># 数据源 db0</span>
<span class="token key attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token value attr-value">ds0,ds1</span>
<span class="token comment"># 第一个数据库</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://124.223.63.123:3306/shop_order_0?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds0.password</span><span class="token punctuation">=</span><span class="token value attr-value">xxx</span>


<span class="token key attr-name">spring.shardingsphere.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token value attr-value">com.zaxxer.hikari.HikariDataSource</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.jdbc-url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://124.223.63.123:3306/shop_order_1?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.shardingsphere.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token value attr-value">xxx</span>


<span class="token comment"># 指定product_order表的数据分布情况，配置数据节点,行表达式标识符使用 \${...} 或 $-&gt;{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $-&gt;{...}</span>
<span class="token comment">#spring.shardingsphere.sharding.tables.product_order.actual-data-nodes=ds0.product_order_$-&gt;{0..1}</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.product_order.actual-data-nodes</span><span class="token punctuation">=</span><span class="token value attr-value">ds$-&gt;{0..1}.product_order_$-&gt;{0..1}</span>

<span class="token comment"># 指定product_order表的分片策略，分片策略包括【分片键和分片算法】</span>
<span class="token comment">#spring.shardingsphere.sharding.tables.product_order.table-strategy.inline.sharding-column=user_id</span>
<span class="token comment">#spring.shardingsphere.sharding.tables.product_order.table-strategy.inline.algorithm-expression=product_order_$-&gt;{user_id % 2}</span>



<span class="token comment">## HINT分片算法</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.product_order.database-strategy.hint.algorithmClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.example.shardingjdbcdemo.service.CustomDBHintShardingAlgorithm</span>
<span class="token key attr-name">spring.shardingsphere.sharding.tables.product_order.table-strategy.hint.algorithmClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.example.shardingjdbcdemo.service.CustomTableHintShardingAlgorithm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标准分片策略standardshardingstrategy-精准分片" tabindex="-1"><a class="header-anchor" href="#标准分片策略standardshardingstrategy-精准分片" aria-hidden="true">#</a> 标准分片策略StandardShardingStrategy-精准分片</h2><p>只支持单分片键，提供PreciseShardingAlgorithm和RangeShardingAlgorithm两个分⽚算法，PreciseShardingAlgorithm 精准分⽚ 是必选的，⽤于处理</p><p>=和IN的分⽚，RangeShardingAlgorithm 范围分配 是可选的，⽤于处理BETWEEN AND分⽚，如果不配置RangeShardingAlgorithm，如果SQL中⽤了</p><p>BETWEEN AND语法，则将按照全库路由处理，性能下降。</p><h2 id="复合分片策略complexshardingstrategy" tabindex="-1"><a class="header-anchor" href="#复合分片策略complexshardingstrategy" aria-hidden="true">#</a> 复合分片策略ComplexShardingStrategy</h2><p>⽀持多分片键，多分⽚键之间的关系复杂，由开发者⾃⼰实现，提供最⼤的灵活度。</p>`,50);function x(T,A){const a=p("ExternalLinkIcon");return o(),l("div",null,[k,m,n("ul",null,[v,g,n("li",null,[s("Mycat "),n("ul",null,[n("li",null,[s("地址 "),n("a",h,[s("http://www.mycat.org.cn/"),e(a)])]),b,y,S,_])])]),n("ul",null,[n("li",null,[w,n("ul",null,[n("li",null,[n("p",null,[s("地址："),n("a",L,[s("https://shardingsphere.apache.org/"),e(a)])])]),f,N])])]),E])}const O=t(d,[["render",x],["__file","5.ShardingJdbc分库分表.html.vue"]]);export{O as default};
