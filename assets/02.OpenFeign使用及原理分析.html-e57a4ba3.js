import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c as p,a as n,e as c,d as o,b as i}from"./app-ef0b4d9d.js";const l="/assets/image-20230208155641144-5208de29.png",u="/assets/image-20230208161413540-477dd5e7.png",r="/assets/image-20230208162453787-7acd9847.png",d={},k=i(`<h1 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h1><p>Feign是在RestTemplate基础上封装的，使用注解的方式来声明一组与服务提供者Rest接口所对应的本地Java API接口方法。Feign将远程Rest接口抽象成一个声明式的FeignClient（Java API）客户端，并且负责完成FeignClient客户端和服务提供方的Rest接口绑定。</p><h1 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h1><ol><li><p>添加依赖</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>openfeign<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">2.2</span><span class="token number">.10</span><span class="token punctuation">.</span><span class="token constant">RELEASE</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在启动类添加注解，指定feign basePackages路径</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@EnableFeignClients(basePackages = &quot;com.xw.order.feign&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h1 id="jdk动态代理机制" tabindex="-1"><a class="header-anchor" href="#jdk动态代理机制" aria-hidden="true">#</a> JDK动态代理机制</h1><p>动态代理实质是通过<code>java.lang.reflect.Proxy#newProxyInstance</code>方法生成已给动态代理实例，相关参数如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>
                                          <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>
                                          <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明:</p><ul><li>第一个参数为ClassLoader类加载器类型，此处的类加载器和被委托类的类加载器相同即可</li><li>第二个参数为Class[]类型，代表动态代理类将会实现的抽象接口，此接口是被委托类所实现的接口。</li><li>第三个参数为InvocationHandler类型，它的调用处理器实例将作为JDK生成的动态代理对象的内部成员，在对动态代理对象进行方法调用时，该处理器的invoke（...）方法会被执行。</li></ul><p>示例说明：</p><p>声明EchoService及其实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EchoService</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EchoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EchoService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;echo method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写调用处理器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EchoServiceInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>


    <span class="token keyword">private</span> <span class="token class-name">EchoService</span> echoService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">EchoServiceInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">EchoService</span> echoService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>echoService <span class="token operator">=</span> echoService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">EchoServiceInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始代理调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        echoService<span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写测试类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testJdkProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">EchoServiceImpl</span> echoServiceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EchoServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EchoServiceInvocationHandler</span> echoServiceInvocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EchoServiceInvocationHandler</span><span class="token punctuation">(</span>echoServiceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EchoService</span> echoService <span class="token operator">=</span>
                <span class="token punctuation">(</span><span class="token class-name">EchoService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">EchoServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> echoServiceInvocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        echoService<span class="token punctuation">.</span><span class="token function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><p><img src="`+l+'" alt="image-20230208155641144" loading="lazy"></p><h1 id="feign重要组件" tabindex="-1"><a class="header-anchor" href="#feign重要组件" aria-hidden="true">#</a> Feign重要组件</h1><p>在分析Feign的执行流程之前，我们先对Feign的一些重要的组件进行了解。</p><h2 id="feign的调用处理器invocationhandler" tabindex="-1"><a class="header-anchor" href="#feign的调用处理器invocationhandler" aria-hidden="true">#</a> Feign的调用处理器InvocationHandler</h2><p>JDK Proxy生成动态代理核心是 定义一个调用处理器。Fegin提供了一个默认的调用处理器<code>FeignInvocationHandler</code>,当Feign与Hystix组合使用时，将会使用<code>HystrixInvocationHandler</code>，默认的调用处理器FeignInvocationHandler是一个相对简单的类，有一个非常重要的Map类型成员dispatch映射，保存着RPC方法反射实例到Feign的方法处理器MethodHandler实例的映射。key为client的method对象，value为该方法对应的方法处理器实例。</p><p><img src="'+u+`" alt="image-20230208161413540" loading="lazy"></p><h2 id="feign的方法处理器methodhandler" tabindex="-1"><a class="header-anchor" href="#feign的方法处理器methodhandler" aria-hidden="true">#</a> Feign的方法处理器MethodHandler</h2><p>Feign的MethodHandler接口是Feign自定义接口，是一个非常简单的接口，只有一个invoke方法。内置的<code>SynchronousMethodHandler</code>同步方法处理实现类是Feign的一个重要类，提供了基本的远程URL的同步请求响应处理。调用的核心代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">RequestTemplate</span> template <span class="token operator">=</span> buildTemplateFromArgs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token function">findOptions</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Retryer</span> retryer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">executeAndDecode</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          retryer<span class="token punctuation">.</span><span class="token function">continueOrPropagate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RetryableException</span> th<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> th<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>propagationPolicy <span class="token operator">==</span> <span class="token constant">UNWRAP</span> <span class="token operator">&amp;&amp;</span> cause <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> cause<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> th<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">!=</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          logger<span class="token punctuation">.</span><span class="token function">logRetry</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="客户端client" tabindex="-1"><a class="header-anchor" href="#客户端client" aria-hidden="true">#</a> 客户端Client</h2><p>客户端组件是Feign中一个非常重要的组件，负责最终的HTTP（包括REST）请求的执行。它的核心逻辑：发送Request请求到服务器，在接收到Response响应后进行解码，并返回结果。</p><p>常用的Feign客户端实现类如下：</p><ul><li>Client.Default类：默认的实现类，使用JDK的HttpURLConnnection类提交HTTP请求。</li><li>ApacheHttpClient类：该客户端类在内部使用Apache HttpClient开源组件提交HTTP请求。</li><li>OkHttpClient类：该客户端类在内部使用OkHttp3开源组件提交HTTP请求。</li><li>LoadBalancerFeignClient类：内部使用Ribbon负载均衡技术完成HTTP请求处理。</li></ul><div class="hint-container tip"><p class="hint-container-title">建议</p><p>默认使用的Client.Default无法做到连接复用，请勿在生产环境使用。</p></div><h1 id="feign流程分析" tabindex="-1"><a class="header-anchor" href="#feign流程分析" aria-hidden="true">#</a> Feign流程分析</h1><ol><li><p>通过应用启动类上的@EnableFeignClients注解开启Feign的装配和远程代理实例创建。在@EnableFeignClients注解源码中可以看到导入了FeignClientsRegistrar类，该类用于扫描@FeignClient注解过的RPC接口。</p><p><img src="`+r+'" alt="image-20230208162453787" loading="lazy"></p></li><li><p>通过对@FeignClient注解RPC接口扫描创建远程调用的动态代理实例。FeignClientsRegistrar类会进行包扫描，扫描所有包下@FeignClient注解过的接口，创建RPC接口的FactoryBean工厂类实例，并将这些FactoryBean注入Spring IOC容器中。如果应用某些地方需要注入RPC接口的实例（比如被@Resource引用），Spring就会通过注册的FactoryBean工厂类实例的getObject()方法获取RPC接口的动态代理实例。<strong>在创建RPC接口的动态代理实例时，Feign会为每一个RPC接口创建一个调用处理器，也会为接口的每一个RPC方法创建一个方法处理器，并且将方法处理器缓存在调用处理器的dispatch映射成员中</strong></p></li><li><p>发生RPC调用时，eign会根据RPC方法的反射实例从调用处理器的dispatch成员中取得方法处理器，然后由MethodHandler方法处理器开始HTTP请求处理。MethodHandler会结合实际的调用参数，通过RequesTemplate模板实例生成Request请求实例。最后，将Request请求实例交给feign.Client客户端实例进一步完成HTTP请求处理。client有feign.client.Default、ApacheHttpClient、OkHttpClient、LoadBalancerFeignClient等。</p></li></ol><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h1>',35),v={href:"https://docs.spring.io/spring-cloud-openfeign/docs/current/reference/html/#creating-feign-clients-manually",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"Spring Cloud、Nginx核心编程",-1);function g(h,b){const s=e("ExternalLinkIcon");return t(),p("div",null,[k,n("ul",null,[n("li",null,[n("a",v,[c("SpringCloud Feign官方文档"),o(s)])]),m])])}const w=a(d,[["render",g],["__file","02.OpenFeign使用及原理分析.html.vue"]]);export{w as default};
