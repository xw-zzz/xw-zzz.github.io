import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as i,b as r}from"./app-ef0b4d9d.js";const t="/assets/image-20230211104303618-70d23e6e.png",s="/assets/image-20230211105131945-674b3a4e.png",l="/assets/image-20230211110444175-718a0551.png",n={},d=r('<h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h1><p>限流用来控制在高并发、大流量的场景中对服务接口请求的速率。常见的限流算法有计数器限流、漏桶算法和令牌桶算法。关于限流也有了一些很成熟的解决方案和中间件。</p><h1 id="限流算法" tabindex="-1"><a class="header-anchor" href="#限流算法" aria-hidden="true">#</a> 限流算法</h1><h2 id="计数器算法" tabindex="-1"><a class="header-anchor" href="#计数器算法" aria-hidden="true">#</a> 计数器算法</h2><p>计数器限流算法在一段时间间隔内处理请求的最大的固定数量，超过部分不做处理。执行流程如下图：</p><p><img src="'+t+'" alt="image-20230211104303618" loading="lazy"></p><h2 id="漏桶限流算法" tabindex="-1"><a class="header-anchor" href="#漏桶限流算法" aria-hidden="true">#</a> 漏桶限流算法</h2><p>流程如下：</p><ol><li>水通过进水口（对应客户端请求）以任意速率流入漏桶。</li><li>漏桶的容量是固定的，出水（放行）速率也是固定的。</li><li>漏桶容量是不变的，如果处理速度太慢，桶内水量会超出桶的容量，后面流入的水就会溢出，表示请求拒绝。</li></ol><p>流程图如下所示：</p><p><img src="'+s+'" alt="image-20230211105131945" loading="lazy"></p><h2 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法" aria-hidden="true">#</a> 令牌桶算法</h2><p>令牌桶算法以一个设定的速率产生令牌并放入令牌桶，每次用户请求都得申请令牌，如果令牌不足，就会拒绝请求。</p><p>流程如下：</p><ol><li>进水口按照某个速度向桶中放入令牌。</li><li>令牌的容量是固定的，但是放行的速度是不固定的，只要桶中还有剩余令牌，一旦请求过来就能申请成功，然后放行。</li><li>如果令牌的发放速度慢于请求到来的速度，桶内就无令牌可领，请求就会被拒绝。</li></ol><p>流程如下图所示：</p><p><img src="'+l+'" alt="image-20230211110444175" loading="lazy"></p>',17),o=[d];function h(c,p){return e(),i("div",null,o)}const g=a(n,[["render",h],["__file","限流解决方案 .html.vue"]]);export{g as default};
