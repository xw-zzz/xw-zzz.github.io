import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as t,b as r}from"./app-ef0b4d9d.js";const o="/assets/100-fbd10f11.jpeg",s={},e=r('<p><img src="'+o+'" alt="" loading="lazy"></p><h2 id="使用设计模式的目的" tabindex="-1"><a class="header-anchor" href="#使用设计模式的目的" aria-hidden="true">#</a> 使用设计模式的目的</h2><ul><li><p>代码重用性；</p></li><li><p>代码可读性；</p></li><li><p>可扩展性；</p></li><li><p>可靠性；</p></li><li><p>高内聚、低耦合</p><!--more--></li></ul><h2 id="七大原则" tabindex="-1"><a class="header-anchor" href="#七大原则" aria-hidden="true">#</a> 七大原则</h2><ul><li><strong>单一职责原则</strong>。对类来说一个类只负责一个职责，如类 A 有两个不同职责：A1 和 A2。当职责 1 需求变更而改变 A，可能会导致 A2 报错，所以我们需要将类 A 力粒度拆分为 A1 和 A2，分别负责不同的职责。</li><li><strong>接口隔离原则</strong>。即一个类对另一个类的依赖应建立在最小的接口之上。</li><li><strong>依赖倒转原则</strong>。第一，高层模块不应该依赖于底层模块，都应该依赖其抽象。第二，抽象不应该依赖于细节，细节应该依赖抽象，中心思想是面向接口编程。相对于细节的多变性，抽象的东西要稳定的多，在 Java 中，抽象指的是接口或抽象类，细节就是具体的实现类。</li><li><strong>里氏替换原则</strong>。在子类中尽量不要重写父类的方法，在适当的情况下，可以通过聚合，组合，依赖来解决问题。</li><li><strong>开闭原则</strong>。一个类在扩展方面应该是开放的，在修改方面是关闭的。</li><li><strong>迪米特原则</strong>。迪米特原则又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息。</li><li><strong>合成复用原则</strong>。尽量使用聚合的方式，而不是使用继承。</li></ul>',5),n=[e];function a(_,c){return l(),t("div",null,n)}const g=i(s,[["render",a],["__file","0.设计模式之七大原则.html.vue"]]);export{g as default};
